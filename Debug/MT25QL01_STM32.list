
MT25QL01_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fc0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080030cc  080030cc  000130cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003298  08003298  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003298  08003298  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003298  08003298  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  080032a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  200000c0  08003360  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08003360  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000092c1  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018d5  00000000  00000000  000293ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000920  00000000  00000000  0002acc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006fa  00000000  00000000  0002b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001758b  00000000  00000000  0002bce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a710  00000000  00000000  0004326d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084246  00000000  00000000  0004d97d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029bc  00000000  00000000  000d1bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000d4580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c0 	.word	0x200000c0
 8000128:	00000000 	.word	0x00000000
 800012c:	080030b4 	.word	0x080030b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c4 	.word	0x200000c4
 8000148:	080030b4 	.word	0x080030b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <Read_ID>:
 * @param	SPI			pointer to the handle of SPI connected to Flash from which to read data
 * @param	*rxData		typedef pointer to the data to be read
 *
 * @retval	20 bytes of specific data can be read
 */
void Read_ID(SPI_HandleTypeDef *SPI, DEVICE_ID *rxData) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
	uint8_t cmd = READ_ID;
 8000166:	239e      	movs	r3, #158	; 0x9e
 8000168:	77fb      	strb	r3, [r7, #31]
	uint8_t data[20];
	FM_Enable(SPI);
 800016a:	6878      	ldr	r0, [r7, #4]
 800016c:	f000 f912 	bl	8000394 <FM_Enable>
	HAL_Delay(1);
 8000170:	2001      	movs	r0, #1
 8000172:	f000 fcab 	bl	8000acc <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 300);
 8000176:	f107 011f 	add.w	r1, r7, #31
 800017a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800017e:	2201      	movs	r2, #1
 8000180:	6878      	ldr	r0, [r7, #4]
 8000182:	f001 fbdb 	bl	800193c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, 20, 1000);
 8000186:	f107 0108 	add.w	r1, r7, #8
 800018a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800018e:	2214      	movs	r2, #20
 8000190:	6878      	ldr	r0, [r7, #4]
 8000192:	f001 fd16 	bl	8001bc2 <HAL_SPI_Receive>
	HAL_Delay(1);
 8000196:	2001      	movs	r0, #1
 8000198:	f000 fc98 	bl	8000acc <HAL_Delay>
	FM_Disable(SPI);
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 f911 	bl	80003c4 <FM_Disable>
	HAL_Delay(500);
 80001a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001a6:	f000 fc91 	bl	8000acc <HAL_Delay>
	rxData->MAN_ID = data[0];
 80001aa:	7a3a      	ldrb	r2, [r7, #8]
 80001ac:	683b      	ldr	r3, [r7, #0]
 80001ae:	701a      	strb	r2, [r3, #0]
	rxData->M_TYPE = data[1];
 80001b0:	7a7a      	ldrb	r2, [r7, #9]
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	705a      	strb	r2, [r3, #1]
	rxData->M_CAP = data[2];
 80001b6:	7aba      	ldrb	r2, [r7, #10]
 80001b8:	683b      	ldr	r3, [r7, #0]
 80001ba:	709a      	strb	r2, [r3, #2]
	rxData->REM_BYTES = data[3];
 80001bc:	7afa      	ldrb	r2, [r7, #11]
 80001be:	683b      	ldr	r3, [r7, #0]
 80001c0:	70da      	strb	r2, [r3, #3]
	rxData->EXT_ID = data[4];
 80001c2:	7b3a      	ldrb	r2, [r7, #12]
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	711a      	strb	r2, [r3, #4]
	rxData->DEV_INFO = data[5];
 80001c8:	7b7a      	ldrb	r2, [r7, #13]
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	715a      	strb	r2, [r3, #5]
	memcpy(rxData->UID, &data[6], 14);
 80001ce:	683b      	ldr	r3, [r7, #0]
 80001d0:	1d98      	adds	r0, r3, #6
 80001d2:	f107 0308 	add.w	r3, r7, #8
 80001d6:	3306      	adds	r3, #6
 80001d8:	220e      	movs	r2, #14
 80001da:	4619      	mov	r1, r3
 80001dc:	f002 fb0c 	bl	80027f8 <memcpy>
	return;
 80001e0:	bf00      	nop
}
 80001e2:	3720      	adds	r7, #32
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bd80      	pop	{r7, pc}

080001e8 <Bulk_Read_4B>:
 * * @param	address		address from which the data is to be read
 * 			*data		pointer to store the data which is read from the corresponding address
 * 			size		size of the data to be read
 */
void Bulk_Read_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
 80001f4:	807b      	strh	r3, [r7, #2]
	uint8_t cmd[5];
	cmd[0] = BYTE_4_READ;
 80001f6:	2313      	movs	r3, #19
 80001f8:	743b      	strb	r3, [r7, #16]
	cmd[1] = (uint8_t) (address >> 24 & 0xff);
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	0e1b      	lsrs	r3, r3, #24
 80001fe:	b2db      	uxtb	r3, r3
 8000200:	747b      	strb	r3, [r7, #17]
	cmd[2] = (uint8_t) (address >> 16 & 0xff);
 8000202:	68bb      	ldr	r3, [r7, #8]
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	b2db      	uxtb	r3, r3
 8000208:	74bb      	strb	r3, [r7, #18]
	cmd[3] = (uint8_t) (address >> 8);
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	0a1b      	lsrs	r3, r3, #8
 800020e:	b2db      	uxtb	r3, r3
 8000210:	74fb      	strb	r3, [r7, #19]
	cmd[4] = (uint8_t) (address);
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	b2db      	uxtb	r3, r3
 8000216:	753b      	strb	r3, [r7, #20]
	FM_Enable(SPI);
 8000218:	68f8      	ldr	r0, [r7, #12]
 800021a:	f000 f8bb 	bl	8000394 <FM_Enable>
	HAL_SPI_Transmit(SPI, cmd, 5, 100);
 800021e:	f107 0110 	add.w	r1, r7, #16
 8000222:	2364      	movs	r3, #100	; 0x64
 8000224:	2205      	movs	r2, #5
 8000226:	68f8      	ldr	r0, [r7, #12]
 8000228:	f001 fb88 	bl	800193c <HAL_SPI_Transmit>
	HAL_SPI_Receive(SPI, data, size, 200);
 800022c:	887a      	ldrh	r2, [r7, #2]
 800022e:	23c8      	movs	r3, #200	; 0xc8
 8000230:	6879      	ldr	r1, [r7, #4]
 8000232:	68f8      	ldr	r0, [r7, #12]
 8000234:	f001 fcc5 	bl	8001bc2 <HAL_SPI_Receive>
	FM_Disable(SPI);
 8000238:	68f8      	ldr	r0, [r7, #12]
 800023a:	f000 f8c3 	bl	80003c4 <FM_Disable>
	HAL_Delay(5);
 800023e:	2005      	movs	r0, #5
 8000240:	f000 fc44 	bl	8000acc <HAL_Delay>
	return;
 8000244:	bf00      	nop
}
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}

0800024c <Page_Write_4B>:
 * 			size		size of the data
 *@retval	none
 */

void Page_Write_4B(SPI_HandleTypeDef *SPI, uint32_t address, uint8_t *data,
		uint16_t size) {
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
 8000258:	807b      	strh	r3, [r7, #2]
	uint8_t cmd = BYTE_4_PAGE_PROGRAM;
 800025a:	2312      	movs	r3, #18
 800025c:	75fb      	strb	r3, [r7, #23]
	uint8_t command[4];
	while (size > PAGE_SIZE) {
 800025e:	e03e      	b.n	80002de <Page_Write_4B+0x92>
		command[0] = (uint8_t) (address >> 24 & 0xff);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	0e1b      	lsrs	r3, r3, #24
 8000264:	b2db      	uxtb	r3, r3
 8000266:	743b      	strb	r3, [r7, #16]
		command[1] = (uint8_t) (address >> 16 & 0xff);
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	0c1b      	lsrs	r3, r3, #16
 800026c:	b2db      	uxtb	r3, r3
 800026e:	747b      	strb	r3, [r7, #17]
		command[2] = (uint8_t) (address >> 8 & 0xff);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	0a1b      	lsrs	r3, r3, #8
 8000274:	b2db      	uxtb	r3, r3
 8000276:	74bb      	strb	r3, [r7, #18]
		command[3] = (uint8_t) (address & 0xFF);
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	b2db      	uxtb	r3, r3
 800027c:	74fb      	strb	r3, [r7, #19]
		Write_Enable(SPI);
 800027e:	68f8      	ldr	r0, [r7, #12]
 8000280:	f000 f86a 	bl	8000358 <Write_Enable>
		FM_Enable(SPI);
 8000284:	68f8      	ldr	r0, [r7, #12]
 8000286:	f000 f885 	bl	8000394 <FM_Enable>
		HAL_Delay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f000 fc1e 	bl	8000acc <HAL_Delay>
		HAL_SPI_Transmit(SPI, &cmd, 1, 100);
 8000290:	f107 0117 	add.w	r1, r7, #23
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	2201      	movs	r2, #1
 8000298:	68f8      	ldr	r0, [r7, #12]
 800029a:	f001 fb4f 	bl	800193c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, command, 4, 200);
 800029e:	f107 0110 	add.w	r1, r7, #16
 80002a2:	23c8      	movs	r3, #200	; 0xc8
 80002a4:	2204      	movs	r2, #4
 80002a6:	68f8      	ldr	r0, [r7, #12]
 80002a8:	f001 fb48 	bl	800193c <HAL_SPI_Transmit>
		HAL_SPI_Transmit(SPI, data, PAGE_SIZE, 200);
 80002ac:	23c8      	movs	r3, #200	; 0xc8
 80002ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	68f8      	ldr	r0, [r7, #12]
 80002b6:	f001 fb41 	bl	800193c <HAL_SPI_Transmit>
		FM_Disable(SPI);
 80002ba:	68f8      	ldr	r0, [r7, #12]
 80002bc:	f000 f882 	bl	80003c4 <FM_Disable>
		HAL_Delay(5);
 80002c0:	2005      	movs	r0, #5
 80002c2:	f000 fc03 	bl	8000acc <HAL_Delay>
		size = size - PAGE_SIZE;
 80002c6:	887b      	ldrh	r3, [r7, #2]
 80002c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80002cc:	807b      	strh	r3, [r7, #2]
		data = data + 256;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002d4:	607b      	str	r3, [r7, #4]
		address = address + 256;
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80002dc:	60bb      	str	r3, [r7, #8]
	while (size > PAGE_SIZE) {
 80002de:	887b      	ldrh	r3, [r7, #2]
 80002e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002e4:	d8bc      	bhi.n	8000260 <Page_Write_4B+0x14>
	}
	command[0] = (uint8_t) (address >> 24 & 0xff);
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	0e1b      	lsrs	r3, r3, #24
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	743b      	strb	r3, [r7, #16]
	command[1] = (uint8_t) (address >> 16 & 0xff);
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	0c1b      	lsrs	r3, r3, #16
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	747b      	strb	r3, [r7, #17]
	command[2] = (uint8_t) (address >> 8 & 0xff);
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	0a1b      	lsrs	r3, r3, #8
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	74bb      	strb	r3, [r7, #18]
	command[3] = (uint8_t) (address & 0xFF);
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	74fb      	strb	r3, [r7, #19]
	Write_Enable(SPI);
 8000304:	68f8      	ldr	r0, [r7, #12]
 8000306:	f000 f827 	bl	8000358 <Write_Enable>
	FM_Enable(SPI);
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f842 	bl	8000394 <FM_Enable>
	HAL_Delay(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fbdb 	bl	8000acc <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 50);
 8000316:	f107 0117 	add.w	r1, r7, #23
 800031a:	2332      	movs	r3, #50	; 0x32
 800031c:	2201      	movs	r2, #1
 800031e:	68f8      	ldr	r0, [r7, #12]
 8000320:	f001 fb0c 	bl	800193c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(SPI, command, 4, 100);
 8000324:	f107 0110 	add.w	r1, r7, #16
 8000328:	2364      	movs	r3, #100	; 0x64
 800032a:	2204      	movs	r2, #4
 800032c:	68f8      	ldr	r0, [r7, #12]
 800032e:	f001 fb05 	bl	800193c <HAL_SPI_Transmit>
	HAL_Delay(1);
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fbca 	bl	8000acc <HAL_Delay>
	HAL_SPI_Transmit(SPI, data, size, 200);
 8000338:	887a      	ldrh	r2, [r7, #2]
 800033a:	23c8      	movs	r3, #200	; 0xc8
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	68f8      	ldr	r0, [r7, #12]
 8000340:	f001 fafc 	bl	800193c <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f83d 	bl	80003c4 <FM_Disable>
	HAL_Delay(5);
 800034a:	2005      	movs	r0, #5
 800034c:	f000 fbbe 	bl	8000acc <HAL_Delay>
	return;
 8000350:	bf00      	nop
}
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <Write_Enable>:
 * 			0: exit 4-byte addresssing mode [to 3-BYTE mode]
 * 			1: enter 4-byte addressing mode
 * @retval	none
 *
 */
void Write_Enable(SPI_HandleTypeDef *SPI) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	uint8_t cmd = WRITE_ENABLE;
 8000360:	2306      	movs	r3, #6
 8000362:	73fb      	strb	r3, [r7, #15]
	FM_Enable(SPI);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f000 f815 	bl	8000394 <FM_Enable>
	HAL_Delay(1);
 800036a:	2001      	movs	r0, #1
 800036c:	f000 fbae 	bl	8000acc <HAL_Delay>
	HAL_SPI_Transmit(SPI, &cmd, 1, 500);
 8000370:	f107 010f 	add.w	r1, r7, #15
 8000374:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000378:	2201      	movs	r2, #1
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f001 fade 	bl	800193c <HAL_SPI_Transmit>
	FM_Disable(SPI);
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f000 f81f 	bl	80003c4 <FM_Disable>
	HAL_Delay(10);
 8000386:	200a      	movs	r0, #10
 8000388:	f000 fba0 	bl	8000acc <HAL_Delay>
}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}

08000394 <FM_Enable>:
 * 			0: exit 4-byte addresssing mode [to 3-BYTE mode]
 * 			1: enter 4-byte addressing mode
 * @retval	none
 *
 */
static void FM_Enable(SPI_HandleTypeDef *SPI) {
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a07      	ldr	r2, [pc, #28]	; (80003bc <FM_Enable+0x28>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d107      	bne.n	80003b4 <FM_Enable+0x20>
		HAL_GPIO_WritePin(FM_CS_GPIO_Port, FM_CS_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	2110      	movs	r1, #16
 80003a8:	4805      	ldr	r0, [pc, #20]	; (80003c0 <FM_Enable+0x2c>)
 80003aa:	f000 fe1b 	bl	8000fe4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80003ae:	2001      	movs	r0, #1
 80003b0:	f000 fb8c 	bl	8000acc <HAL_Delay>
	}
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	200000dc 	.word	0x200000dc
 80003c0:	40010800 	.word	0x40010800

080003c4 <FM_Disable>:
 * 			0: exit 4-byte addresssing mode [to 3-BYTE mode]
 * 			1: enter 4-byte addressing mode
 * @retval	none
 *
 */
static void FM_Disable(SPI_HandleTypeDef *SPI) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	if (SPI == &MAIN_FM) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4a07      	ldr	r2, [pc, #28]	; (80003ec <FM_Disable+0x28>)
 80003d0:	4293      	cmp	r3, r2
 80003d2:	d107      	bne.n	80003e4 <FM_Disable+0x20>
		HAL_GPIO_WritePin(FM_CS_GPIO_Port, FM_CS_Pin, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2110      	movs	r1, #16
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <FM_Disable+0x2c>)
 80003da:	f000 fe03 	bl	8000fe4 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80003de:	2001      	movs	r0, #1
 80003e0:	f000 fb74 	bl	8000acc <HAL_Delay>
	}
}
 80003e4:	bf00      	nop
 80003e6:	3708      	adds	r7, #8
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000dc 	.word	0x200000dc
 80003f0:	40010800 	.word	0x40010800

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb05 	bl	8000a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f89b 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f935 	bl	8000670 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000406:	f000 f8d3 	bl	80005b0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800040a:	f000 f907 	bl	800061c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

	myprintf("Reading ID of MT25QL01GBBBES Flash Memory\n");
 800040e:	4838      	ldr	r0, [pc, #224]	; (80004f0 <main+0xfc>)
 8000410:	f000 f960 	bl	80006d4 <myprintf>

	Read_ID(&hspi1, &dev_id);
 8000414:	4937      	ldr	r1, [pc, #220]	; (80004f4 <main+0x100>)
 8000416:	4838      	ldr	r0, [pc, #224]	; (80004f8 <main+0x104>)
 8000418:	f7ff fea0 	bl	800015c <Read_ID>

	myprintf("FM Device Info ............\r\n");
 800041c:	4837      	ldr	r0, [pc, #220]	; (80004fc <main+0x108>)
 800041e:	f000 f959 	bl	80006d4 <myprintf>
	myprintf("Device ID: %x\r\n", dev_id.MAN_ID);
 8000422:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <main+0x100>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4619      	mov	r1, r3
 8000428:	4835      	ldr	r0, [pc, #212]	; (8000500 <main+0x10c>)
 800042a:	f000 f953 	bl	80006d4 <myprintf>
	myprintf("Memory Capacity: %x\r\n", dev_id.M_CAP);
 800042e:	4b31      	ldr	r3, [pc, #196]	; (80004f4 <main+0x100>)
 8000430:	789b      	ldrb	r3, [r3, #2]
 8000432:	4619      	mov	r1, r3
 8000434:	4833      	ldr	r0, [pc, #204]	; (8000504 <main+0x110>)
 8000436:	f000 f94d 	bl	80006d4 <myprintf>
	myprintf("Memory type:%x\r\n", dev_id.M_TYPE);
 800043a:	4b2e      	ldr	r3, [pc, #184]	; (80004f4 <main+0x100>)
 800043c:	785b      	ldrb	r3, [r3, #1]
 800043e:	4619      	mov	r1, r3
 8000440:	4831      	ldr	r0, [pc, #196]	; (8000508 <main+0x114>)
 8000442:	f000 f947 	bl	80006d4 <myprintf>
	myprintf("Device Info: %x\r\n", dev_id.DEV_INFO);
 8000446:	4b2b      	ldr	r3, [pc, #172]	; (80004f4 <main+0x100>)
 8000448:	795b      	ldrb	r3, [r3, #5]
 800044a:	4619      	mov	r1, r3
 800044c:	482f      	ldr	r0, [pc, #188]	; (800050c <main+0x118>)
 800044e:	f000 f941 	bl	80006d4 <myprintf>
	myprintf("Extended ID: %x\r\n", dev_id.EXT_ID);
 8000452:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <main+0x100>)
 8000454:	791b      	ldrb	r3, [r3, #4]
 8000456:	4619      	mov	r1, r3
 8000458:	482d      	ldr	r0, [pc, #180]	; (8000510 <main+0x11c>)
 800045a:	f000 f93b 	bl	80006d4 <myprintf>
	myprintf("Device Memory Type: %x\r\n", dev_id.M_CAP);
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <main+0x100>)
 8000460:	789b      	ldrb	r3, [r3, #2]
 8000462:	4619      	mov	r1, r3
 8000464:	482b      	ldr	r0, [pc, #172]	; (8000514 <main+0x120>)
 8000466:	f000 f935 	bl	80006d4 <myprintf>
	myprintf("Remaining Bytes: %x\r\n", dev_id.REM_BYTES);
 800046a:	4b22      	ldr	r3, [pc, #136]	; (80004f4 <main+0x100>)
 800046c:	78db      	ldrb	r3, [r3, #3]
 800046e:	4619      	mov	r1, r3
 8000470:	4829      	ldr	r0, [pc, #164]	; (8000518 <main+0x124>)
 8000472:	f000 f92f 	bl	80006d4 <myprintf>
	myprintf("UID: %x\r\n");
 8000476:	4829      	ldr	r0, [pc, #164]	; (800051c <main+0x128>)
 8000478:	f000 f92c 	bl	80006d4 <myprintf>
	for (int i = 0; i < 14; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	e00b      	b.n	800049a <main+0xa6>
		myprintf("%x", dev_id.UID[i]);
 8000482:	4a1c      	ldr	r2, [pc, #112]	; (80004f4 <main+0x100>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4413      	add	r3, r2
 8000488:	3306      	adds	r3, #6
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	4619      	mov	r1, r3
 800048e:	4824      	ldr	r0, [pc, #144]	; (8000520 <main+0x12c>)
 8000490:	f000 f920 	bl	80006d4 <myprintf>
	for (int i = 0; i < 14; i++) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b0d      	cmp	r3, #13
 800049e:	ddf0      	ble.n	8000482 <main+0x8e>
	}

	myprintf("writing %s data in %x location of flash memory\n",(char * )fm_tx_buff, DATA_WRITE_ADDRESS);
 80004a0:	2200      	movs	r2, #0
 80004a2:	4920      	ldr	r1, [pc, #128]	; (8000524 <main+0x130>)
 80004a4:	4820      	ldr	r0, [pc, #128]	; (8000528 <main+0x134>)
 80004a6:	f000 f915 	bl	80006d4 <myprintf>
	Page_Write_4B(&hspi1, DATA_WRITE_ADDRESS, fm_tx_buff, strlen((char *)fm_tx_buff));
 80004aa:	481e      	ldr	r0, [pc, #120]	; (8000524 <main+0x130>)
 80004ac:	f7ff fe4e 	bl	800014c <strlen>
 80004b0:	4603      	mov	r3, r0
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	4a1b      	ldr	r2, [pc, #108]	; (8000524 <main+0x130>)
 80004b6:	2100      	movs	r1, #0
 80004b8:	480f      	ldr	r0, [pc, #60]	; (80004f8 <main+0x104>)
 80004ba:	f7ff fec7 	bl	800024c <Page_Write_4B>
	myprintf("Reading %d bytes of data from %x location\n",strlen((char *)fm_tx_buff), DATA_WRITE_ADDRESS);
 80004be:	4819      	ldr	r0, [pc, #100]	; (8000524 <main+0x130>)
 80004c0:	f7ff fe44 	bl	800014c <strlen>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2200      	movs	r2, #0
 80004c8:	4619      	mov	r1, r3
 80004ca:	4818      	ldr	r0, [pc, #96]	; (800052c <main+0x138>)
 80004cc:	f000 f902 	bl	80006d4 <myprintf>
	Bulk_Read_4B(&hspi1, DATA_WRITE_ADDRESS, fm_rx_buff, strlen((char *)fm_tx_buff));
 80004d0:	4814      	ldr	r0, [pc, #80]	; (8000524 <main+0x130>)
 80004d2:	f7ff fe3b 	bl	800014c <strlen>
 80004d6:	4603      	mov	r3, r0
 80004d8:	b29b      	uxth	r3, r3
 80004da:	4a15      	ldr	r2, [pc, #84]	; (8000530 <main+0x13c>)
 80004dc:	2100      	movs	r1, #0
 80004de:	4806      	ldr	r0, [pc, #24]	; (80004f8 <main+0x104>)
 80004e0:	f7ff fe82 	bl	80001e8 <Bulk_Read_4B>
	myprintf("Data from flash memory: %s\n",(char *)fm_rx_buff);
 80004e4:	4912      	ldr	r1, [pc, #72]	; (8000530 <main+0x13c>)
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <main+0x140>)
 80004e8:	f000 f8f4 	bl	80006d4 <myprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80004ec:	e7fe      	b.n	80004ec <main+0xf8>
 80004ee:	bf00      	nop
 80004f0:	080030cc 	.word	0x080030cc
 80004f4:	2000017c 	.word	0x2000017c
 80004f8:	200000dc 	.word	0x200000dc
 80004fc:	080030f8 	.word	0x080030f8
 8000500:	08003118 	.word	0x08003118
 8000504:	08003128 	.word	0x08003128
 8000508:	08003140 	.word	0x08003140
 800050c:	08003154 	.word	0x08003154
 8000510:	08003168 	.word	0x08003168
 8000514:	0800317c 	.word	0x0800317c
 8000518:	08003198 	.word	0x08003198
 800051c:	080031b0 	.word	0x080031b0
 8000520:	080031bc 	.word	0x080031bc
 8000524:	20000000 	.word	0x20000000
 8000528:	080031c0 	.word	0x080031c0
 800052c:	080031f0 	.word	0x080031f0
 8000530:	20000190 	.word	0x20000190
 8000534:	0800321c 	.word	0x0800321c

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b090      	sub	sp, #64	; 0x40
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0318 	add.w	r3, r7, #24
 8000542:	2228      	movs	r2, #40	; 0x28
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f002 f922 	bl	8002790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]
 8000558:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055a:	2302      	movs	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	2301      	movs	r3, #1
 8000560:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000562:	2310      	movs	r3, #16
 8000564:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000566:	2300      	movs	r3, #0
 8000568:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056a:	f107 0318 	add.w	r3, r7, #24
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fd50 	bl	8001014 <HAL_RCC_OscConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800057a:	f000 f8ed 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057e:	230f      	movs	r3, #15
 8000580:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f000 ffbe 	bl	8001518 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005a2:	f000 f8d9 	bl	8000758 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3740      	adds	r7, #64	; 0x40
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b4:	4b17      	ldr	r3, [pc, #92]	; (8000614 <MX_SPI1_Init+0x64>)
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <MX_SPI1_Init+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b16      	ldr	r3, [pc, #88]	; (8000614 <MX_SPI1_Init+0x64>)
 80005bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <MX_SPI1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <MX_SPI1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ce:	4b11      	ldr	r3, [pc, #68]	; (8000614 <MX_SPI1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	; (8000614 <MX_SPI1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_SPI1_Init+0x64>)
 80005dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <MX_SPI1_Init+0x64>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <MX_SPI1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	; (8000614 <MX_SPI1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <MX_SPI1_Init+0x64>)
 80005fc:	220a      	movs	r2, #10
 80005fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_SPI1_Init+0x64>)
 8000602:	f001 f917 	bl	8001834 <HAL_SPI_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800060c:	f000 f8a4 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000dc 	.word	0x200000dc
 8000618:	40013000 	.word	0x40013000

0800061c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000622:	4a12      	ldr	r2, [pc, #72]	; (800066c <MX_USART1_UART_Init+0x50>)
 8000624:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000628:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800062c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b09      	ldr	r3, [pc, #36]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_USART1_UART_Init+0x4c>)
 8000654:	f001 fe76 	bl	8002344 <HAL_UART_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800065e:	f000 f87b 	bl	8000758 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000134 	.word	0x20000134
 800066c:	40013800 	.word	0x40013800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_GPIO_Init+0x5c>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a10      	ldr	r2, [pc, #64]	; (80006cc <MX_GPIO_Init+0x5c>)
 800068a:	f043 0304 	orr.w	r3, r3, #4
 800068e:	6193      	str	r3, [r2, #24]
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_GPIO_Init+0x5c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f003 0304 	and.w	r3, r3, #4
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FM_CS_GPIO_Port, FM_CS_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2110      	movs	r1, #16
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0x60>)
 80006a2:	f000 fc9f 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FM_CS_Pin */
  GPIO_InitStruct.Pin = FM_CS_Pin;
 80006a6:	2310      	movs	r3, #16
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2302      	movs	r3, #2
 80006b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FM_CS_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0308 	add.w	r3, r7, #8
 80006ba:	4619      	mov	r1, r3
 80006bc:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0x60>)
 80006be:	f000 fb0d 	bl	8000cdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c2:	bf00      	nop
 80006c4:	3718      	adds	r7, #24
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021000 	.word	0x40021000
 80006d0:	40010800 	.word	0x40010800

080006d4 <myprintf>:
 *
 * @param	fmt	pointer the array of characters data to be transmitted
 *
 * @retval	none
 */
void myprintf(const char *fmt, ...) {
 80006d4:	b40f      	push	{r0, r1, r2, r3}
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
	static char temp[100];
	va_list args;
	va_start(args, fmt);
 80006dc:	f107 031c 	add.w	r3, r7, #28
 80006e0:	607b      	str	r3, [r7, #4]
	vsnprintf(temp, sizeof(temp), fmt, args);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	69ba      	ldr	r2, [r7, #24]
 80006e6:	2164      	movs	r1, #100	; 0x64
 80006e8:	4818      	ldr	r0, [pc, #96]	; (800074c <myprintf+0x78>)
 80006ea:	f002 f843 	bl	8002774 <vsniprintf>
	va_end(args);
	int len = strlen(temp);
 80006ee:	4817      	ldr	r0, [pc, #92]	; (800074c <myprintf+0x78>)
 80006f0:	f7ff fd2c 	bl	800014c <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60fb      	str	r3, [r7, #12]

	uint32_t current_tick = HAL_GetTick();
 80006f8:	f000 f9de 	bl	8000ab8 <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 80006fe:	e007      	b.n	8000710 <myprintf+0x3c>
		if (HAL_GetTick() - current_tick > UART_TX_TIMEOUT_MS) {
 8000700:	f000 f9da 	bl	8000ab8 <HAL_GetTick>
 8000704:	4602      	mov	r2, r0
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800070e:	d806      	bhi.n	800071e <myprintf+0x4a>
	while (HAL_UART_GetState(&DEBUG_STREAM) == HAL_UART_STATE_BUSY_TX) {
 8000710:	480f      	ldr	r0, [pc, #60]	; (8000750 <myprintf+0x7c>)
 8000712:	f001 feea 	bl	80024ea <HAL_UART_GetState>
 8000716:	4603      	mov	r3, r0
 8000718:	2b21      	cmp	r3, #33	; 0x21
 800071a:	d0f1      	beq.n	8000700 <myprintf+0x2c>
 800071c:	e000      	b.n	8000720 <myprintf+0x4c>
			break;
 800071e:	bf00      	nop
		}
	}
	HAL_UART_Transmit(&DEBUG_STREAM, (uint8_t*) temp, len,
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	b299      	uxth	r1, r3
			len * 12 / 9600 + 50);	//no of bytes * 12 / baud rate + buffer time
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	4a0b      	ldr	r2, [pc, #44]	; (8000754 <myprintf+0x80>)
 8000728:	fb82 0203 	smull	r0, r2, r2, r3
 800072c:	1212      	asrs	r2, r2, #8
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	3332      	adds	r3, #50	; 0x32
	HAL_UART_Transmit(&DEBUG_STREAM, (uint8_t*) temp, len,
 8000734:	460a      	mov	r2, r1
 8000736:	4905      	ldr	r1, [pc, #20]	; (800074c <myprintf+0x78>)
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <myprintf+0x7c>)
 800073a:	f001 fe53 	bl	80023e4 <HAL_UART_Transmit>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr
 800074c:	200001f4 	.word	0x200001f4
 8000750:	20000134 	.word	0x20000134
 8000754:	51eb851f 	.word	0x51eb851f

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000760:	e7fe      	b.n	8000760 <Error_Handler+0x8>
	...

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_MspInit+0x5c>)
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <HAL_MspInit+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6193      	str	r3, [r2, #24]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x5c>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x5c>)
 8000784:	69db      	ldr	r3, [r3, #28]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x5c>)
 8000788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078c:	61d3      	str	r3, [r2, #28]
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x5c>)
 8000790:	69db      	ldr	r3, [r3, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079a:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <HAL_MspInit+0x60>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	4a04      	ldr	r2, [pc, #16]	; (80007c4 <HAL_MspInit+0x60>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	40010000 	.word	0x40010000

080007c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a1b      	ldr	r2, [pc, #108]	; (8000850 <HAL_SPI_MspInit+0x88>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d12f      	bne.n	8000848 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 80007ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007f2:	6193      	str	r3, [r2, #24]
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 8000806:	f043 0304 	orr.w	r3, r3, #4
 800080a:	6193      	str	r3, [r2, #24]
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_SPI_MspInit+0x8c>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	f003 0304 	and.w	r3, r3, #4
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000818:	23a0      	movs	r3, #160	; 0xa0
 800081a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	; (8000858 <HAL_SPI_MspInit+0x90>)
 800082c:	f000 fa56 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000830:	2340      	movs	r3, #64	; 0x40
 8000832:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <HAL_SPI_MspInit+0x90>)
 8000844:	f000 fa4a 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40013000 	.word	0x40013000
 8000854:	40021000 	.word	0x40021000
 8000858:	40010800 	.word	0x40010800

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0x8c>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d131      	bne.n	80008e0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a1a      	ldr	r2, [pc, #104]	; (80008ec <HAL_UART_MspInit+0x90>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <HAL_UART_MspInit+0x90>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_UART_MspInit+0x90>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a14      	ldr	r2, [pc, #80]	; (80008ec <HAL_UART_MspInit+0x90>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_UART_MspInit+0x90>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0304 	and.w	r3, r3, #4
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <HAL_UART_MspInit+0x94>)
 80008c2:	f000 fa0b 	bl	8000cdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <HAL_UART_MspInit+0x94>)
 80008dc:	f000 f9fe 	bl	8000cdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40013800 	.word	0x40013800
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010800 	.word	0x40010800

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <NMI_Handler+0x4>

080008fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fe:	e7fe      	b.n	80008fe <HardFault_Handler+0x4>

08000900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000904:	e7fe      	b.n	8000904 <MemManage_Handler+0x4>

08000906 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000906:	b480      	push	{r7}
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800090a:	e7fe      	b.n	800090a <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <UsageFault_Handler+0x4>

08000912 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000912:	b480      	push	{r7}
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093a:	f000 f8ab 	bl	8000a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f001 ff14 	bl	80027a0 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20005000 	.word	0x20005000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	20000258 	.word	0x20000258
 80009ac:	200003a8 	.word	0x200003a8

080009b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009bc:	f7ff fff8 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480b      	ldr	r0, [pc, #44]	; (80009f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80009c2:	490c      	ldr	r1, [pc, #48]	; (80009f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a09      	ldr	r2, [pc, #36]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009d8:	4c09      	ldr	r4, [pc, #36]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009e6:	f001 fee1 	bl	80027ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff fd03 	bl	80003f4 <main>
  bx lr
 80009ee:	4770      	bx	lr
  ldr r0, =_sdata
 80009f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f4:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80009f8:	080032a0 	.word	0x080032a0
  ldr r2, =_sbss
 80009fc:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000a00:	200003a8 	.word	0x200003a8

08000a04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a04:	e7fe      	b.n	8000a04 <ADC1_2_IRQHandler>
	...

08000a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <HAL_Init+0x28>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a07      	ldr	r2, [pc, #28]	; (8000a30 <HAL_Init+0x28>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f92b 	bl	8000c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1e:	200f      	movs	r0, #15
 8000a20:	f000 f808 	bl	8000a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a24:	f7ff fe9e 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a28:	2300      	movs	r3, #0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40022000 	.word	0x40022000

08000a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x54>)
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_InitTick+0x58>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	4619      	mov	r1, r3
 8000a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f935 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	e00e      	b.n	8000a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b0f      	cmp	r3, #15
 8000a66:	d80a      	bhi.n	8000a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	f000 f90b 	bl	8000c8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a74:	4a06      	ldr	r2, [pc, #24]	; (8000a90 <HAL_InitTick+0x5c>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e000      	b.n	8000a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3708      	adds	r7, #8
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000064 	.word	0x20000064
 8000a8c:	2000006c 	.word	0x2000006c
 8000a90:	20000068 	.word	0x20000068

08000a94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x1c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a03      	ldr	r2, [pc, #12]	; (8000ab4 <HAL_IncTick+0x20>)
 8000aa6:	6013      	str	r3, [r2, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bc80      	pop	{r7}
 8000aae:	4770      	bx	lr
 8000ab0:	2000006c 	.word	0x2000006c
 8000ab4:	2000025c 	.word	0x2000025c

08000ab8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <HAL_GetTick+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr
 8000ac8:	2000025c 	.word	0x2000025c

08000acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad4:	f7ff fff0 	bl	8000ab8 <HAL_GetTick>
 8000ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae4:	d005      	beq.n	8000af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_Delay+0x44>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000af2:	bf00      	nop
 8000af4:	f7ff ffe0 	bl	8000ab8 <HAL_GetTick>
 8000af8:	4602      	mov	r2, r0
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d8f7      	bhi.n	8000af4 <HAL_Delay+0x28>
  {
  }
}
 8000b04:	bf00      	nop
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000006c 	.word	0x2000006c

08000b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b30:	4013      	ands	r3, r2
 8000b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b46:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <__NVIC_SetPriorityGrouping+0x44>)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	60d3      	str	r3, [r2, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <__NVIC_GetPriorityGrouping+0x18>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	f003 0307 	and.w	r3, r3, #7
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db0a      	blt.n	8000ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	490c      	ldr	r1, [pc, #48]	; (8000bc4 <__NVIC_SetPriority+0x4c>)
 8000b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	440b      	add	r3, r1
 8000b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba0:	e00a      	b.n	8000bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	4908      	ldr	r1, [pc, #32]	; (8000bc8 <__NVIC_SetPriority+0x50>)
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 030f 	and.w	r3, r3, #15
 8000bae:	3b04      	subs	r3, #4
 8000bb0:	0112      	lsls	r2, r2, #4
 8000bb2:	b2d2      	uxtb	r2, r2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	f1c3 0307 	rsb	r3, r3, #7
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	bf28      	it	cs
 8000bea:	2304      	movcs	r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	3304      	adds	r3, #4
 8000bf2:	2b06      	cmp	r3, #6
 8000bf4:	d902      	bls.n	8000bfc <NVIC_EncodePriority+0x30>
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	e000      	b.n	8000bfe <NVIC_EncodePriority+0x32>
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	f04f 32ff 	mov.w	r2, #4294967295
 8000c04:	69bb      	ldr	r3, [r7, #24]
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	43da      	mvns	r2, r3
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	401a      	ands	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c14:	f04f 31ff 	mov.w	r1, #4294967295
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	43d9      	mvns	r1, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	4313      	orrs	r3, r2
         );
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3724      	adds	r7, #36	; 0x24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c40:	d301      	bcc.n	8000c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c42:	2301      	movs	r3, #1
 8000c44:	e00f      	b.n	8000c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c46:	4a0a      	ldr	r2, [pc, #40]	; (8000c70 <SysTick_Config+0x40>)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c4e:	210f      	movs	r1, #15
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f7ff ff90 	bl	8000b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <SysTick_Config+0x40>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c5e:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <SysTick_Config+0x40>)
 8000c60:	2207      	movs	r2, #7
 8000c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	e000e010 	.word	0xe000e010

08000c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ff49 	bl	8000b14 <__NVIC_SetPriorityGrouping>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c9c:	f7ff ff5e 	bl	8000b5c <__NVIC_GetPriorityGrouping>
 8000ca0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	68b9      	ldr	r1, [r7, #8]
 8000ca6:	6978      	ldr	r0, [r7, #20]
 8000ca8:	f7ff ff90 	bl	8000bcc <NVIC_EncodePriority>
 8000cac:	4602      	mov	r2, r0
 8000cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff5f 	bl	8000b78 <__NVIC_SetPriority>
}
 8000cba:	bf00      	nop
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffb0 	bl	8000c30 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b08b      	sub	sp, #44	; 0x2c
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cee:	e169      	b.n	8000fc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	f040 8158 	bne.w	8000fbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	4a9a      	ldr	r2, [pc, #616]	; (8000f7c <HAL_GPIO_Init+0x2a0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d05e      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
 8000d18:	4a98      	ldr	r2, [pc, #608]	; (8000f7c <HAL_GPIO_Init+0x2a0>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d875      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d1e:	4a98      	ldr	r2, [pc, #608]	; (8000f80 <HAL_GPIO_Init+0x2a4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d058      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
 8000d24:	4a96      	ldr	r2, [pc, #600]	; (8000f80 <HAL_GPIO_Init+0x2a4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d86f      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d2a:	4a96      	ldr	r2, [pc, #600]	; (8000f84 <HAL_GPIO_Init+0x2a8>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d052      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
 8000d30:	4a94      	ldr	r2, [pc, #592]	; (8000f84 <HAL_GPIO_Init+0x2a8>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d869      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d36:	4a94      	ldr	r2, [pc, #592]	; (8000f88 <HAL_GPIO_Init+0x2ac>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d04c      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
 8000d3c:	4a92      	ldr	r2, [pc, #584]	; (8000f88 <HAL_GPIO_Init+0x2ac>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d863      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d42:	4a92      	ldr	r2, [pc, #584]	; (8000f8c <HAL_GPIO_Init+0x2b0>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d046      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
 8000d48:	4a90      	ldr	r2, [pc, #576]	; (8000f8c <HAL_GPIO_Init+0x2b0>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d85d      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d4e:	2b12      	cmp	r3, #18
 8000d50:	d82a      	bhi.n	8000da8 <HAL_GPIO_Init+0xcc>
 8000d52:	2b12      	cmp	r3, #18
 8000d54:	d859      	bhi.n	8000e0a <HAL_GPIO_Init+0x12e>
 8000d56:	a201      	add	r2, pc, #4	; (adr r2, 8000d5c <HAL_GPIO_Init+0x80>)
 8000d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d5c:	08000dd7 	.word	0x08000dd7
 8000d60:	08000db1 	.word	0x08000db1
 8000d64:	08000dc3 	.word	0x08000dc3
 8000d68:	08000e05 	.word	0x08000e05
 8000d6c:	08000e0b 	.word	0x08000e0b
 8000d70:	08000e0b 	.word	0x08000e0b
 8000d74:	08000e0b 	.word	0x08000e0b
 8000d78:	08000e0b 	.word	0x08000e0b
 8000d7c:	08000e0b 	.word	0x08000e0b
 8000d80:	08000e0b 	.word	0x08000e0b
 8000d84:	08000e0b 	.word	0x08000e0b
 8000d88:	08000e0b 	.word	0x08000e0b
 8000d8c:	08000e0b 	.word	0x08000e0b
 8000d90:	08000e0b 	.word	0x08000e0b
 8000d94:	08000e0b 	.word	0x08000e0b
 8000d98:	08000e0b 	.word	0x08000e0b
 8000d9c:	08000e0b 	.word	0x08000e0b
 8000da0:	08000db9 	.word	0x08000db9
 8000da4:	08000dcd 	.word	0x08000dcd
 8000da8:	4a79      	ldr	r2, [pc, #484]	; (8000f90 <HAL_GPIO_Init+0x2b4>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dae:	e02c      	b.n	8000e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e029      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e024      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e01f      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e01a      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dde:	2304      	movs	r3, #4
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e013      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d105      	bne.n	8000df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dec:	2308      	movs	r3, #8
 8000dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	611a      	str	r2, [r3, #16]
          break;
 8000df6:	e009      	b.n	8000e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	615a      	str	r2, [r3, #20]
          break;
 8000e02:	e003      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	e000      	b.n	8000e0c <HAL_GPIO_Init+0x130>
          break;
 8000e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2bff      	cmp	r3, #255	; 0xff
 8000e10:	d801      	bhi.n	8000e16 <HAL_GPIO_Init+0x13a>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	e001      	b.n	8000e1a <HAL_GPIO_Init+0x13e>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3304      	adds	r3, #4
 8000e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2bff      	cmp	r3, #255	; 0xff
 8000e20:	d802      	bhi.n	8000e28 <HAL_GPIO_Init+0x14c>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x152>
 8000e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e2a:	3b08      	subs	r3, #8
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	210f      	movs	r1, #15
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	401a      	ands	r2, r3
 8000e40:	6a39      	ldr	r1, [r7, #32]
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	431a      	orrs	r2, r3
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 80b1 	beq.w	8000fbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5c:	4b4d      	ldr	r3, [pc, #308]	; (8000f94 <HAL_GPIO_Init+0x2b8>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_GPIO_Init+0x2b8>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6193      	str	r3, [r2, #24]
 8000e68:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x2b8>)
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e74:	4a48      	ldr	r2, [pc, #288]	; (8000f98 <HAL_GPIO_Init+0x2bc>)
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	089b      	lsrs	r3, r3, #2
 8000e7a:	3302      	adds	r3, #2
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <HAL_GPIO_Init+0x2c0>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d013      	beq.n	8000ec8 <HAL_GPIO_Init+0x1ec>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a3f      	ldr	r2, [pc, #252]	; (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d00d      	beq.n	8000ec4 <HAL_GPIO_Init+0x1e8>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a3e      	ldr	r2, [pc, #248]	; (8000fa4 <HAL_GPIO_Init+0x2c8>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d007      	beq.n	8000ec0 <HAL_GPIO_Init+0x1e4>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d101      	bne.n	8000ebc <HAL_GPIO_Init+0x1e0>
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e006      	b.n	8000eca <HAL_GPIO_Init+0x1ee>
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	e004      	b.n	8000eca <HAL_GPIO_Init+0x1ee>
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	e002      	b.n	8000eca <HAL_GPIO_Init+0x1ee>
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <HAL_GPIO_Init+0x1ee>
 8000ec8:	2300      	movs	r3, #0
 8000eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	0092      	lsls	r2, r2, #2
 8000ed2:	4093      	lsls	r3, r2
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eda:	492f      	ldr	r1, [pc, #188]	; (8000f98 <HAL_GPIO_Init+0x2bc>)
 8000edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	492c      	ldr	r1, [pc, #176]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	608b      	str	r3, [r1, #8]
 8000f00:	e006      	b.n	8000f10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f02:	4b2a      	ldr	r3, [pc, #168]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f04:	689a      	ldr	r2, [r3, #8]
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	4928      	ldr	r1, [pc, #160]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	4922      	ldr	r1, [pc, #136]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60cb      	str	r3, [r1, #12]
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f2a:	4b20      	ldr	r3, [pc, #128]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	491e      	ldr	r1, [pc, #120]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f44:	4b19      	ldr	r3, [pc, #100]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4918      	ldr	r1, [pc, #96]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4914      	ldr	r1, [pc, #80]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d021      	beq.n	8000fb0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	490e      	ldr	r1, [pc, #56]	; (8000fac <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	600b      	str	r3, [r1, #0]
 8000f78:	e021      	b.n	8000fbe <HAL_GPIO_Init+0x2e2>
 8000f7a:	bf00      	nop
 8000f7c:	10320000 	.word	0x10320000
 8000f80:	10310000 	.word	0x10310000
 8000f84:	10220000 	.word	0x10220000
 8000f88:	10210000 	.word	0x10210000
 8000f8c:	10120000 	.word	0x10120000
 8000f90:	10110000 	.word	0x10110000
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40010000 	.word	0x40010000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00
 8000fa4:	40011000 	.word	0x40011000
 8000fa8:	40011400 	.word	0x40011400
 8000fac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <HAL_GPIO_Init+0x304>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <HAL_GPIO_Init+0x304>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fca:	fa22 f303 	lsr.w	r3, r2, r3
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	f47f ae8e 	bne.w	8000cf0 <HAL_GPIO_Init+0x14>
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	372c      	adds	r7, #44	; 0x2c
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40010400 	.word	0x40010400

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	611a      	str	r2, [r3, #16]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e272      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 8087 	beq.w	8001142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 030c 	and.w	r3, r3, #12
 800103c:	2b04      	cmp	r3, #4
 800103e:	d00c      	beq.n	800105a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001040:	4b8f      	ldr	r3, [pc, #572]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 030c 	and.w	r3, r3, #12
 8001048:	2b08      	cmp	r3, #8
 800104a:	d112      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
 800104c:	4b8c      	ldr	r3, [pc, #560]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001058:	d10b      	bne.n	8001072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d06c      	beq.n	8001140 <HAL_RCC_OscConfig+0x12c>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d168      	bne.n	8001140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e24c      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x76>
 800107c:	4b80      	ldr	r3, [pc, #512]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a7f      	ldr	r2, [pc, #508]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	e02e      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d10c      	bne.n	80010ac <HAL_RCC_OscConfig+0x98>
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a7a      	ldr	r2, [pc, #488]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800109c:	6013      	str	r3, [r2, #0]
 800109e:	4b78      	ldr	r3, [pc, #480]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a77      	ldr	r2, [pc, #476]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0xbc>
 80010b6:	4b72      	ldr	r3, [pc, #456]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a71      	ldr	r2, [pc, #452]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b6f      	ldr	r3, [pc, #444]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xd4>
 80010d0:	4b6b      	ldr	r3, [pc, #428]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a6a      	ldr	r2, [pc, #424]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a67      	ldr	r2, [pc, #412]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fce2 	bl	8000ab8 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fcde 	bl	8000ab8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e200      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xe4>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fcce 	bl	8000ab8 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fcca 	bl	8000ab8 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e1ec      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001132:	4b53      	ldr	r3, [pc, #332]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x10c>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d063      	beq.n	8001216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800114e:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800115a:	4b49      	ldr	r3, [pc, #292]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	d11c      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d116      	bne.n	80011a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	4b43      	ldr	r3, [pc, #268]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d005      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d001      	beq.n	800118a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e1c0      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118a:	4b3d      	ldr	r3, [pc, #244]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4939      	ldr	r1, [pc, #228]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800119a:	4313      	orrs	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119e:	e03a      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d020      	beq.n	80011ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011a8:	4b36      	ldr	r3, [pc, #216]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ae:	f7ff fc83 	bl	8000ab8 <HAL_GetTick>
 80011b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b4:	e008      	b.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011b6:	f7ff fc7f 	bl	8000ab8 <HAL_GetTick>
 80011ba:	4602      	mov	r2, r0
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	1ad3      	subs	r3, r2, r3
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e1a1      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d0f0      	beq.n	80011b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d4:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	4927      	ldr	r1, [pc, #156]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	600b      	str	r3, [r1, #0]
 80011e8:	e015      	b.n	8001216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ea:	4b26      	ldr	r3, [pc, #152]	; (8001284 <HAL_RCC_OscConfig+0x270>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f0:	f7ff fc62 	bl	8000ab8 <HAL_GetTick>
 80011f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f8:	f7ff fc5e 	bl	8000ab8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e180      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800120a:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 0302 	and.w	r3, r3, #2
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	2b00      	cmp	r3, #0
 8001220:	d03a      	beq.n	8001298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d019      	beq.n	800125e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fc42 	bl	8000ab8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001238:	f7ff fc3e 	bl	8000ab8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b02      	cmp	r3, #2
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e160      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_RCC_OscConfig+0x26c>)
 800124c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f000 face 	bl	80017f8 <RCC_Delay>
 800125c:	e01c      	b.n	8001298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_RCC_OscConfig+0x274>)
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc28 	bl	8000ab8 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126a:	e00f      	b.n	800128c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc24 	bl	8000ab8 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d908      	bls.n	800128c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e146      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
 800127e:	bf00      	nop
 8001280:	40021000 	.word	0x40021000
 8001284:	42420000 	.word	0x42420000
 8001288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e9      	bne.n	800126c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80a6 	beq.w	80013f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b8b      	ldr	r3, [pc, #556]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	4a87      	ldr	r2, [pc, #540]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c0:	61d3      	str	r3, [r2, #28]
 80012c2:	4b85      	ldr	r3, [pc, #532]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80012c4:	69db      	ldr	r3, [r3, #28]
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b82      	ldr	r3, [pc, #520]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b7f      	ldr	r3, [pc, #508]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7e      	ldr	r2, [pc, #504]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fbe5 	bl	8000ab8 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fbe1 	bl	8000ab8 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	; 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e103      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b75      	ldr	r3, [pc, #468]	; (80014dc <HAL_RCC_OscConfig+0x4c8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x312>
 8001318:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6213      	str	r3, [r2, #32]
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x334>
 800132e:	4b6a      	ldr	r3, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	4a69      	ldr	r2, [pc, #420]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6213      	str	r3, [r2, #32]
 800133a:	4b67      	ldr	r3, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800133c:	6a1b      	ldr	r3, [r3, #32]
 800133e:	4a66      	ldr	r2, [pc, #408]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	f023 0304 	bic.w	r3, r3, #4
 8001344:	6213      	str	r3, [r2, #32]
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x356>
 8001350:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a60      	ldr	r2, [pc, #384]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001356:	f043 0304 	orr.w	r3, r3, #4
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800135e:	6a1b      	ldr	r3, [r3, #32]
 8001360:	4a5d      	ldr	r2, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6213      	str	r3, [r2, #32]
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x36e>
 800136a:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a5a      	ldr	r2, [pc, #360]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	f023 0301 	bic.w	r3, r3, #1
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a57      	ldr	r2, [pc, #348]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	f023 0304 	bic.w	r3, r3, #4
 8001380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fb95 	bl	8000ab8 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001390:	e00a      	b.n	80013a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001392:	f7ff fb91 	bl	8000ab8 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e0b1      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a8:	4b4b      	ldr	r3, [pc, #300]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0ee      	beq.n	8001392 <HAL_RCC_OscConfig+0x37e>
 80013b4:	e014      	b.n	80013e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b6:	f7ff fb7f 	bl	8000ab8 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013bc:	e00a      	b.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013be:	f7ff fb7b 	bl	8000ab8 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e09b      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d4:	4b40      	ldr	r3, [pc, #256]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1ee      	bne.n	80013be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d105      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013e6:	4b3c      	ldr	r3, [pc, #240]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	69db      	ldr	r3, [r3, #28]
 80013ea:	4a3b      	ldr	r2, [pc, #236]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f000 8087 	beq.w	800150a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b08      	cmp	r3, #8
 8001406:	d061      	beq.n	80014cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	d146      	bne.n	800149e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb4f 	bl	8000ab8 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800141e:	f7ff fb4b 	bl	8000ab8 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e06d      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001430:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1f0      	bne.n	800141e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001444:	d108      	bne.n	8001458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001446:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	4921      	ldr	r1, [pc, #132]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001458:	4b1f      	ldr	r3, [pc, #124]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a19      	ldr	r1, [r3, #32]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	430b      	orrs	r3, r1
 800146a:	491b      	ldr	r1, [pc, #108]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fb1f 	bl	8000ab8 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fb1b 	bl	8000ab8 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e03d      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x46a>
 800149c:	e035      	b.n	800150a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <HAL_RCC_OscConfig+0x4cc>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fb08 	bl	8000ab8 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fb04 	bl	8000ab8 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e026      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_RCC_OscConfig+0x4c4>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x498>
 80014ca:	e01e      	b.n	800150a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e019      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
 80014d8:	40021000 	.word	0x40021000
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <HAL_RCC_OscConfig+0x500>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d106      	bne.n	8001506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40021000 	.word	0x40021000

08001518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e0d0      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800152c:	4b6a      	ldr	r3, [pc, #424]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d910      	bls.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153a:	4b67      	ldr	r3, [pc, #412]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f023 0207 	bic.w	r2, r3, #7
 8001542:	4965      	ldr	r1, [pc, #404]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154a:	4b63      	ldr	r3, [pc, #396]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	429a      	cmp	r2, r3
 8001556:	d001      	beq.n	800155c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0b8      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001574:	4b59      	ldr	r3, [pc, #356]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	4a58      	ldr	r2, [pc, #352]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800157e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	4a52      	ldr	r2, [pc, #328]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001598:	4b50      	ldr	r3, [pc, #320]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	494d      	ldr	r1, [pc, #308]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0301 	and.w	r3, r3, #1
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d040      	beq.n	8001638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d107      	bne.n	80015ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b47      	ldr	r3, [pc, #284]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d115      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e07f      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e073      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e06b      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f6:	4b39      	ldr	r3, [pc, #228]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f023 0203 	bic.w	r2, r3, #3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4936      	ldr	r1, [pc, #216]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001608:	f7ff fa56 	bl	8000ab8 <HAL_GetTick>
 800160c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800160e:	e00a      	b.n	8001626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa52 	bl	8000ab8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	f241 3288 	movw	r2, #5000	; 0x1388
 800161e:	4293      	cmp	r3, r2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e053      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 020c 	and.w	r2, r3, #12
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	429a      	cmp	r2, r3
 8001636:	d1eb      	bne.n	8001610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0307 	and.w	r3, r3, #7
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d210      	bcs.n	8001668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 0207 	bic.w	r2, r3, #7
 800164e:	4922      	ldr	r1, [pc, #136]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4313      	orrs	r3, r2
 8001654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_RCC_ClockConfig+0x1c0>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	429a      	cmp	r2, r3
 8001662:	d001      	beq.n	8001668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	e032      	b.n	80016ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d008      	beq.n	8001686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001674:	4b19      	ldr	r3, [pc, #100]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	4916      	ldr	r1, [pc, #88]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	490e      	ldr	r1, [pc, #56]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016a6:	f000 f821 	bl	80016ec <HAL_RCC_GetSysClockFreq>
 80016aa:	4602      	mov	r2, r0
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <HAL_RCC_ClockConfig+0x1c4>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	091b      	lsrs	r3, r3, #4
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	490a      	ldr	r1, [pc, #40]	; (80016e0 <HAL_RCC_ClockConfig+0x1c8>)
 80016b8:	5ccb      	ldrb	r3, [r1, r3]
 80016ba:	fa22 f303 	lsr.w	r3, r2, r3
 80016be:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <HAL_RCC_ClockConfig+0x1cc>)
 80016c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_RCC_ClockConfig+0x1d0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff f9b4 	bl	8000a34 <HAL_InitTick>

  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40022000 	.word	0x40022000
 80016dc:	40021000 	.word	0x40021000
 80016e0:	08003238 	.word	0x08003238
 80016e4:	20000064 	.word	0x20000064
 80016e8:	20000068 	.word	0x20000068

080016ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_GetSysClockFreq+0x94>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b04      	cmp	r3, #4
 8001714:	d002      	beq.n	800171c <HAL_RCC_GetSysClockFreq+0x30>
 8001716:	2b08      	cmp	r3, #8
 8001718:	d003      	beq.n	8001722 <HAL_RCC_GetSysClockFreq+0x36>
 800171a:	e027      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800171e:	613b      	str	r3, [r7, #16]
      break;
 8001720:	e027      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	0c9b      	lsrs	r3, r3, #18
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	4a17      	ldr	r2, [pc, #92]	; (8001788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800172c:	5cd3      	ldrb	r3, [r2, r3]
 800172e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d010      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_GetSysClockFreq+0x94>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	0c5b      	lsrs	r3, r3, #17
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800174e:	fb03 f202 	mul.w	r2, r3, r2
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	fbb2 f3f3 	udiv	r3, r2, r3
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e004      	b.n	8001766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a0c      	ldr	r2, [pc, #48]	; (8001790 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	613b      	str	r3, [r7, #16]
      break;
 800176a:	e002      	b.n	8001772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800176c:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_RCC_GetSysClockFreq+0x98>)
 800176e:	613b      	str	r3, [r7, #16]
      break;
 8001770:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001772:	693b      	ldr	r3, [r7, #16]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40021000 	.word	0x40021000
 8001784:	007a1200 	.word	0x007a1200
 8001788:	08003250 	.word	0x08003250
 800178c:	08003260 	.word	0x08003260
 8001790:	003d0900 	.word	0x003d0900

08001794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001798:	4b02      	ldr	r3, [pc, #8]	; (80017a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800179a:	681b      	ldr	r3, [r3, #0]
}
 800179c:	4618      	mov	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr
 80017a4:	20000064 	.word	0x20000064

080017a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017ac:	f7ff fff2 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017b0:	4602      	mov	r2, r0
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	0a1b      	lsrs	r3, r3, #8
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	4903      	ldr	r1, [pc, #12]	; (80017cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80017be:	5ccb      	ldrb	r3, [r1, r3]
 80017c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40021000 	.word	0x40021000
 80017cc:	08003248 	.word	0x08003248

080017d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017d4:	f7ff ffde 	bl	8001794 <HAL_RCC_GetHCLKFreq>
 80017d8:	4602      	mov	r2, r0
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	0adb      	lsrs	r3, r3, #11
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	4903      	ldr	r1, [pc, #12]	; (80017f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017e6:	5ccb      	ldrb	r3, [r1, r3]
 80017e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	08003248 	.word	0x08003248

080017f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001800:	4b0a      	ldr	r3, [pc, #40]	; (800182c <RCC_Delay+0x34>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <RCC_Delay+0x38>)
 8001806:	fba2 2303 	umull	r2, r3, r2, r3
 800180a:	0a5b      	lsrs	r3, r3, #9
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	fb02 f303 	mul.w	r3, r2, r3
 8001812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001814:	bf00      	nop
  }
  while (Delay --);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	60fa      	str	r2, [r7, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1f9      	bne.n	8001814 <RCC_Delay+0x1c>
}
 8001820:	bf00      	nop
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000064 	.word	0x20000064
 8001830:	10624dd3 	.word	0x10624dd3

08001834 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e076      	b.n	8001934 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184a:	2b00      	cmp	r3, #0
 800184c:	d108      	bne.n	8001860 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001856:	d009      	beq.n	800186c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
 800185e:	e005      	b.n	800186c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d106      	bne.n	800188c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe ff9e 	bl	80007c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2202      	movs	r2, #2
 8001890:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018be:	431a      	orrs	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691b      	ldr	r3, [r3, #16]
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	431a      	orrs	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018dc:	431a      	orrs	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	ea42 0103 	orr.w	r1, r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	0c1a      	lsrs	r2, r3, #16
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f002 0204 	and.w	r2, r2, #4
 8001912:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	69da      	ldr	r2, [r3, #28]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001922:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b088      	sub	sp, #32
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	4613      	mov	r3, r2
 800194a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001956:	2b01      	cmp	r3, #1
 8001958:	d101      	bne.n	800195e <HAL_SPI_Transmit+0x22>
 800195a:	2302      	movs	r3, #2
 800195c:	e12d      	b.n	8001bba <HAL_SPI_Transmit+0x27e>
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001966:	f7ff f8a7 	bl	8000ab8 <HAL_GetTick>
 800196a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800196c:	88fb      	ldrh	r3, [r7, #6]
 800196e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001976:	b2db      	uxtb	r3, r3
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800197c:	2302      	movs	r3, #2
 800197e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001980:	e116      	b.n	8001bb0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_SPI_Transmit+0x52>
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d102      	bne.n	8001994 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001992:	e10d      	b.n	8001bb0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2203      	movs	r2, #3
 8001998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	88fa      	ldrh	r2, [r7, #6]
 80019ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2200      	movs	r2, #0
 80019be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2200      	movs	r2, #0
 80019d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019da:	d10f      	bne.n	80019fc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a06:	2b40      	cmp	r3, #64	; 0x40
 8001a08:	d007      	beq.n	8001a1a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a22:	d14f      	bne.n	8001ac4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_SPI_Transmit+0xf6>
 8001a2c:	8afb      	ldrh	r3, [r7, #22]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d142      	bne.n	8001ab8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	881a      	ldrh	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	1c9a      	adds	r2, r3, #2
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a56:	e02f      	b.n	8001ab8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d112      	bne.n	8001a8c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	1c9a      	adds	r2, r3, #2
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a8a:	e015      	b.n	8001ab8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a8c:	f7ff f814 	bl	8000ab8 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d803      	bhi.n	8001aa4 <HAL_SPI_Transmit+0x168>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa2:	d102      	bne.n	8001aaa <HAL_SPI_Transmit+0x16e>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d106      	bne.n	8001ab8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001ab6:	e07b      	b.n	8001bb0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1ca      	bne.n	8001a58 <HAL_SPI_Transmit+0x11c>
 8001ac2:	e050      	b.n	8001b66 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_SPI_Transmit+0x196>
 8001acc:	8afb      	ldrh	r3, [r7, #22]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d144      	bne.n	8001b5c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	330c      	adds	r3, #12
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001af8:	e030      	b.n	8001b5c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d113      	bne.n	8001b30 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	330c      	adds	r3, #12
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	1c5a      	adds	r2, r3, #1
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	3b01      	subs	r3, #1
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	86da      	strh	r2, [r3, #54]	; 0x36
 8001b2e:	e015      	b.n	8001b5c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b30:	f7fe ffc2 	bl	8000ab8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d803      	bhi.n	8001b48 <HAL_SPI_Transmit+0x20c>
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b46:	d102      	bne.n	8001b4e <HAL_SPI_Transmit+0x212>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001b5a:	e029      	b.n	8001bb0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d1c9      	bne.n	8001afa <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	6839      	ldr	r1, [r7, #0]
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 fbcc 	bl	8002308 <SPI_EndRxTxTransaction>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d002      	beq.n	8001b7c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d10a      	bne.n	8001b9a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
 8001ba6:	e003      	b.n	8001bb0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b088      	sub	sp, #32
 8001bc6:	af02      	add	r7, sp, #8
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d002      	beq.n	8001be8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001be2:	2302      	movs	r3, #2
 8001be4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001be6:	e0fb      	b.n	8001de0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bf0:	d112      	bne.n	8001c18 <HAL_SPI_Receive+0x56>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10e      	bne.n	8001c18 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f8ef 	bl	8001df2 <HAL_SPI_TransmitReceive>
 8001c14:	4603      	mov	r3, r0
 8001c16:	e0e8      	b.n	8001dea <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_SPI_Receive+0x64>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e0e1      	b.n	8001dea <HAL_SPI_Receive+0x228>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c2e:	f7fe ff43 	bl	8000ab8 <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_SPI_Receive+0x7e>
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d102      	bne.n	8001c46 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001c44:	e0cc      	b.n	8001de0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2200      	movs	r2, #0
 8001c76:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c8c:	d10f      	bne.n	8001cae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c9c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	d007      	beq.n	8001ccc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d16a      	bne.n	8001daa <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001cd4:	e032      	b.n	8001d3c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d115      	bne.n	8001d10 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f103 020c 	add.w	r2, r3, #12
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	7812      	ldrb	r2, [r2, #0]
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d0e:	e015      	b.n	8001d3c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d10:	f7fe fed2 	bl	8000ab8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d803      	bhi.n	8001d28 <HAL_SPI_Receive+0x166>
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d26:	d102      	bne.n	8001d2e <HAL_SPI_Receive+0x16c>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001d3a:	e051      	b.n	8001de0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1c7      	bne.n	8001cd6 <HAL_SPI_Receive+0x114>
 8001d46:	e035      	b.n	8001db4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d113      	bne.n	8001d7e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d60:	b292      	uxth	r2, r2
 8001d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d68:	1c9a      	adds	r2, r3, #2
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	3b01      	subs	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001d7c:	e015      	b.n	8001daa <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d7e:	f7fe fe9b 	bl	8000ab8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d803      	bhi.n	8001d96 <HAL_SPI_Receive+0x1d4>
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d102      	bne.n	8001d9c <HAL_SPI_Receive+0x1da>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d106      	bne.n	8001daa <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001da8:	e01a      	b.n	8001de0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1c9      	bne.n	8001d48 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001db4:	693a      	ldr	r2, [r7, #16]
 8001db6:	6839      	ldr	r1, [r7, #0]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fa53 	bl	8002264 <SPI_EndRxTransaction>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	75fb      	strb	r3, [r7, #23]
 8001dd6:	e003      	b.n	8001de0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08c      	sub	sp, #48	; 0x30
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_SPI_TransmitReceive+0x26>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e198      	b.n	800214a <HAL_SPI_TransmitReceive+0x358>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e20:	f7fe fe4a 	bl	8000ab8 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d00f      	beq.n	8001e62 <HAL_SPI_TransmitReceive+0x70>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e48:	d107      	bne.n	8001e5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <HAL_SPI_TransmitReceive+0x68>
 8001e52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d003      	beq.n	8001e62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e60:	e16d      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x82>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_SPI_TransmitReceive+0x82>
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d103      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001e7a:	e160      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d003      	beq.n	8001e90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2205      	movs	r2, #5
 8001e8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2200      	movs	r2, #0
 8001e94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	887a      	ldrh	r2, [r7, #2]
 8001ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	887a      	ldrh	r2, [r7, #2]
 8001ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	d007      	beq.n	8001ee4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ee2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001eec:	d17c      	bne.n	8001fe8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_SPI_TransmitReceive+0x10a>
 8001ef6:	8b7b      	ldrh	r3, [r7, #26]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d16a      	bne.n	8001fd2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f00:	881a      	ldrh	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	1c9a      	adds	r2, r3, #2
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f20:	e057      	b.n	8001fd2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d11b      	bne.n	8001f68 <HAL_SPI_TransmitReceive+0x176>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_SPI_TransmitReceive+0x176>
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d113      	bne.n	8001f68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f44:	881a      	ldrh	r2, [r3, #0]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	1c9a      	adds	r2, r3, #2
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d119      	bne.n	8001faa <HAL_SPI_TransmitReceive+0x1b8>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d014      	beq.n	8001faa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8a:	b292      	uxth	r2, r2
 8001f8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f92:	1c9a      	adds	r2, r3, #2
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001faa:	f7fe fd85 	bl	8000ab8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d80b      	bhi.n	8001fd2 <HAL_SPI_TransmitReceive+0x1e0>
 8001fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d007      	beq.n	8001fd2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8001fd0:	e0b5      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1a2      	bne.n	8001f22 <HAL_SPI_TransmitReceive+0x130>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d19d      	bne.n	8001f22 <HAL_SPI_TransmitReceive+0x130>
 8001fe6:	e080      	b.n	80020ea <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d002      	beq.n	8001ff6 <HAL_SPI_TransmitReceive+0x204>
 8001ff0:	8b7b      	ldrh	r3, [r7, #26]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d16f      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	330c      	adds	r3, #12
 8002000:	7812      	ldrb	r2, [r2, #0]
 8002002:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800201c:	e05b      	b.n	80020d6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11c      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x274>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d017      	beq.n	8002066 <HAL_SPI_TransmitReceive+0x274>
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d114      	bne.n	8002066 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	330c      	adds	r3, #12
 8002046:	7812      	ldrb	r2, [r2, #0]
 8002048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002058:	b29b      	uxth	r3, r3
 800205a:	3b01      	subs	r3, #1
 800205c:	b29a      	uxth	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d119      	bne.n	80020a8 <HAL_SPI_TransmitReceive+0x2b6>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d014      	beq.n	80020a8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800209a:	b29b      	uxth	r3, r3
 800209c:	3b01      	subs	r3, #1
 800209e:	b29a      	uxth	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80020a4:	2301      	movs	r3, #1
 80020a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80020a8:	f7fe fd06 	bl	8000ab8 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d803      	bhi.n	80020c0 <HAL_SPI_TransmitReceive+0x2ce>
 80020b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020be:	d102      	bne.n	80020c6 <HAL_SPI_TransmitReceive+0x2d4>
 80020c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d107      	bne.n	80020d6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80020d4:	e033      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020da:	b29b      	uxth	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d19e      	bne.n	800201e <HAL_SPI_TransmitReceive+0x22c>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d199      	bne.n	800201e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 f90a 	bl	8002308 <SPI_EndRxTxTransaction>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002106:	e01a      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002134:	e003      	b.n	800213e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800214a:	4618      	mov	r0, r3
 800214c:	3730      	adds	r7, #48	; 0x30
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	4613      	mov	r3, r2
 8002162:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002164:	f7fe fca8 	bl	8000ab8 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002174:	f7fe fca0 	bl	8000ab8 <HAL_GetTick>
 8002178:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800217a:	4b39      	ldr	r3, [pc, #228]	; (8002260 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	015b      	lsls	r3, r3, #5
 8002180:	0d1b      	lsrs	r3, r3, #20
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800218a:	e054      	b.n	8002236 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002192:	d050      	beq.n	8002236 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002194:	f7fe fc90 	bl	8000ab8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d902      	bls.n	80021aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d13d      	bne.n	8002226 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80021b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80021c2:	d111      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021cc:	d004      	beq.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d6:	d107      	bne.n	80021e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f0:	d10f      	bne.n	8002212 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002210:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2200      	movs	r2, #0
 800221e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e017      	b.n	8002256 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3b01      	subs	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4013      	ands	r3, r2
 8002240:	68ba      	ldr	r2, [r7, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	461a      	mov	r2, r3
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	429a      	cmp	r2, r3
 8002252:	d19b      	bne.n	800218c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3720      	adds	r7, #32
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000064 	.word	0x20000064

08002264 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002278:	d111      	bne.n	800229e <SPI_EndRxTransaction+0x3a>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002282:	d004      	beq.n	800228e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d107      	bne.n	800229e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800229c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022a6:	d117      	bne.n	80022d8 <SPI_EndRxTransaction+0x74>
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b0:	d112      	bne.n	80022d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2200      	movs	r2, #0
 80022ba:	2101      	movs	r1, #1
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff ff49 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01a      	beq.n	80022fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e013      	b.n	8002300 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	2200      	movs	r2, #0
 80022e0:	2180      	movs	r1, #128	; 0x80
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f7ff ff36 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f2:	f043 0220 	orr.w	r2, r3, #32
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e000      	b.n	8002300 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2200      	movs	r2, #0
 800231c:	2180      	movs	r1, #128	; 0x80
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f7ff ff18 	bl	8002154 <SPI_WaitFlagStateUntilTimeout>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232e:	f043 0220 	orr.w	r2, r3, #32
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e000      	b.n	800233c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e042      	b.n	80023dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fa76 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2224      	movs	r2, #36	; 0x24
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f939 	bl	8002600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800239c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08a      	sub	sp, #40	; 0x28
 80023e8:	af02      	add	r7, sp, #8
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b20      	cmp	r3, #32
 8002402:	d16d      	bne.n	80024e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_UART_Transmit+0x2c>
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e066      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2221      	movs	r2, #33	; 0x21
 800241e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002422:	f7fe fb49 	bl	8000ab8 <HAL_GetTick>
 8002426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	88fa      	ldrh	r2, [r7, #6]
 800242c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800243c:	d108      	bne.n	8002450 <HAL_UART_Transmit+0x6c>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d104      	bne.n	8002450 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002446:	2300      	movs	r3, #0
 8002448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	61bb      	str	r3, [r7, #24]
 800244e:	e003      	b.n	8002458 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002458:	e02a      	b.n	80024b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2200      	movs	r2, #0
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f85d 	bl	8002524 <UART_WaitOnFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e036      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10b      	bne.n	8002492 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002488:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	3302      	adds	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
 8002490:	e007      	b.n	80024a2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	781a      	ldrb	r2, [r3, #0]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	3301      	adds	r3, #1
 80024a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	3b01      	subs	r3, #1
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1cf      	bne.n	800245a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2200      	movs	r2, #0
 80024c2:	2140      	movs	r1, #64	; 0x40
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 f82d 	bl	8002524 <UART_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e006      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2220      	movs	r2, #32
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800250a:	b2db      	uxtb	r3, r3
 800250c:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	4313      	orrs	r3, r2
 8002518:	b2db      	uxtb	r3, r3
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr

08002524 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b090      	sub	sp, #64	; 0x40
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	4613      	mov	r3, r2
 8002532:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002534:	e050      	b.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253c:	d04c      	beq.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800253e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <UART_WaitOnFlagUntilTimeout+0x30>
 8002544:	f7fe fab8 	bl	8000ab8 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002550:	429a      	cmp	r2, r3
 8002552:	d241      	bcs.n	80025d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	330c      	adds	r3, #12
 800255a:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800255c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800255e:	e853 3f00 	ldrex	r3, [r3]
 8002562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	330c      	adds	r3, #12
 8002572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002574:	637a      	str	r2, [r7, #52]	; 0x34
 8002576:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800257a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800257c:	e841 2300 	strex	r3, r2, [r1]
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e5      	bne.n	8002554 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	3314      	adds	r3, #20
 800258e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	e853 3f00 	ldrex	r3, [r3]
 8002596:	613b      	str	r3, [r7, #16]
   return(result);
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	f023 0301 	bic.w	r3, r3, #1
 800259e:	63bb      	str	r3, [r7, #56]	; 0x38
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	3314      	adds	r3, #20
 80025a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025a8:	623a      	str	r2, [r7, #32]
 80025aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	69f9      	ldr	r1, [r7, #28]
 80025ae:	6a3a      	ldr	r2, [r7, #32]
 80025b0:	e841 2300 	strex	r3, r2, [r1]
 80025b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e5      	bne.n	8002588 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e00f      	b.n	80025f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	4013      	ands	r3, r2
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	bf0c      	ite	eq
 80025e8:	2301      	moveq	r3, #1
 80025ea:	2300      	movne	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d09f      	beq.n	8002536 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3740      	adds	r7, #64	; 0x40
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800263a:	f023 030c 	bic.w	r3, r3, #12
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	430b      	orrs	r3, r1
 8002646:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <UART_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d103      	bne.n	8002670 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff f8b2 	bl	80017d0 <HAL_RCC_GetPCLK2Freq>
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	e002      	b.n	8002676 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff f89a 	bl	80017a8 <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009a      	lsls	r2, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	0119      	lsls	r1, r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <UART_SetConfig+0x118>)
 80026ae:	fba3 0302 	umull	r0, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	3332      	adds	r3, #50	; 0x32
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <UART_SetConfig+0x118>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026cc:	4419      	add	r1, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <UART_SetConfig+0x118>)
 80026e6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2064      	movs	r0, #100	; 0x64
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	3332      	adds	r3, #50	; 0x32
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <UART_SetConfig+0x118>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	440a      	add	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40013800 	.word	0x40013800
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <_vsniprintf_r>:
 800271c:	b530      	push	{r4, r5, lr}
 800271e:	4614      	mov	r4, r2
 8002720:	2c00      	cmp	r4, #0
 8002722:	4605      	mov	r5, r0
 8002724:	461a      	mov	r2, r3
 8002726:	b09b      	sub	sp, #108	; 0x6c
 8002728:	da05      	bge.n	8002736 <_vsniprintf_r+0x1a>
 800272a:	238b      	movs	r3, #139	; 0x8b
 800272c:	6003      	str	r3, [r0, #0]
 800272e:	f04f 30ff 	mov.w	r0, #4294967295
 8002732:	b01b      	add	sp, #108	; 0x6c
 8002734:	bd30      	pop	{r4, r5, pc}
 8002736:	f44f 7302 	mov.w	r3, #520	; 0x208
 800273a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800273e:	bf0c      	ite	eq
 8002740:	4623      	moveq	r3, r4
 8002742:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002746:	9302      	str	r3, [sp, #8]
 8002748:	9305      	str	r3, [sp, #20]
 800274a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274e:	9100      	str	r1, [sp, #0]
 8002750:	9104      	str	r1, [sp, #16]
 8002752:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002756:	4669      	mov	r1, sp
 8002758:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800275a:	f000 f9a9 	bl	8002ab0 <_svfiprintf_r>
 800275e:	1c43      	adds	r3, r0, #1
 8002760:	bfbc      	itt	lt
 8002762:	238b      	movlt	r3, #139	; 0x8b
 8002764:	602b      	strlt	r3, [r5, #0]
 8002766:	2c00      	cmp	r4, #0
 8002768:	d0e3      	beq.n	8002732 <_vsniprintf_r+0x16>
 800276a:	2200      	movs	r2, #0
 800276c:	9b00      	ldr	r3, [sp, #0]
 800276e:	701a      	strb	r2, [r3, #0]
 8002770:	e7df      	b.n	8002732 <_vsniprintf_r+0x16>
	...

08002774 <vsniprintf>:
 8002774:	b507      	push	{r0, r1, r2, lr}
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	4613      	mov	r3, r2
 800277a:	460a      	mov	r2, r1
 800277c:	4601      	mov	r1, r0
 800277e:	4803      	ldr	r0, [pc, #12]	; (800278c <vsniprintf+0x18>)
 8002780:	6800      	ldr	r0, [r0, #0]
 8002782:	f7ff ffcb 	bl	800271c <_vsniprintf_r>
 8002786:	b003      	add	sp, #12
 8002788:	f85d fb04 	ldr.w	pc, [sp], #4
 800278c:	200000bc 	.word	0x200000bc

08002790 <memset>:
 8002790:	4603      	mov	r3, r0
 8002792:	4402      	add	r2, r0
 8002794:	4293      	cmp	r3, r2
 8002796:	d100      	bne.n	800279a <memset+0xa>
 8002798:	4770      	bx	lr
 800279a:	f803 1b01 	strb.w	r1, [r3], #1
 800279e:	e7f9      	b.n	8002794 <memset+0x4>

080027a0 <__errno>:
 80027a0:	4b01      	ldr	r3, [pc, #4]	; (80027a8 <__errno+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	200000bc 	.word	0x200000bc

080027ac <__libc_init_array>:
 80027ac:	b570      	push	{r4, r5, r6, lr}
 80027ae:	2600      	movs	r6, #0
 80027b0:	4d0c      	ldr	r5, [pc, #48]	; (80027e4 <__libc_init_array+0x38>)
 80027b2:	4c0d      	ldr	r4, [pc, #52]	; (80027e8 <__libc_init_array+0x3c>)
 80027b4:	1b64      	subs	r4, r4, r5
 80027b6:	10a4      	asrs	r4, r4, #2
 80027b8:	42a6      	cmp	r6, r4
 80027ba:	d109      	bne.n	80027d0 <__libc_init_array+0x24>
 80027bc:	f000 fc7a 	bl	80030b4 <_init>
 80027c0:	2600      	movs	r6, #0
 80027c2:	4d0a      	ldr	r5, [pc, #40]	; (80027ec <__libc_init_array+0x40>)
 80027c4:	4c0a      	ldr	r4, [pc, #40]	; (80027f0 <__libc_init_array+0x44>)
 80027c6:	1b64      	subs	r4, r4, r5
 80027c8:	10a4      	asrs	r4, r4, #2
 80027ca:	42a6      	cmp	r6, r4
 80027cc:	d105      	bne.n	80027da <__libc_init_array+0x2e>
 80027ce:	bd70      	pop	{r4, r5, r6, pc}
 80027d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d4:	4798      	blx	r3
 80027d6:	3601      	adds	r6, #1
 80027d8:	e7ee      	b.n	80027b8 <__libc_init_array+0xc>
 80027da:	f855 3b04 	ldr.w	r3, [r5], #4
 80027de:	4798      	blx	r3
 80027e0:	3601      	adds	r6, #1
 80027e2:	e7f2      	b.n	80027ca <__libc_init_array+0x1e>
 80027e4:	08003298 	.word	0x08003298
 80027e8:	08003298 	.word	0x08003298
 80027ec:	08003298 	.word	0x08003298
 80027f0:	0800329c 	.word	0x0800329c

080027f4 <__retarget_lock_acquire_recursive>:
 80027f4:	4770      	bx	lr

080027f6 <__retarget_lock_release_recursive>:
 80027f6:	4770      	bx	lr

080027f8 <memcpy>:
 80027f8:	440a      	add	r2, r1
 80027fa:	4291      	cmp	r1, r2
 80027fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002800:	d100      	bne.n	8002804 <memcpy+0xc>
 8002802:	4770      	bx	lr
 8002804:	b510      	push	{r4, lr}
 8002806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800280a:	4291      	cmp	r1, r2
 800280c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002810:	d1f9      	bne.n	8002806 <memcpy+0xe>
 8002812:	bd10      	pop	{r4, pc}

08002814 <_free_r>:
 8002814:	b538      	push	{r3, r4, r5, lr}
 8002816:	4605      	mov	r5, r0
 8002818:	2900      	cmp	r1, #0
 800281a:	d040      	beq.n	800289e <_free_r+0x8a>
 800281c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002820:	1f0c      	subs	r4, r1, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfb8      	it	lt
 8002826:	18e4      	addlt	r4, r4, r3
 8002828:	f000 f8dc 	bl	80029e4 <__malloc_lock>
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <_free_r+0x8c>)
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	b933      	cbnz	r3, 8002840 <_free_r+0x2c>
 8002832:	6063      	str	r3, [r4, #4]
 8002834:	6014      	str	r4, [r2, #0]
 8002836:	4628      	mov	r0, r5
 8002838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800283c:	f000 b8d8 	b.w	80029f0 <__malloc_unlock>
 8002840:	42a3      	cmp	r3, r4
 8002842:	d908      	bls.n	8002856 <_free_r+0x42>
 8002844:	6820      	ldr	r0, [r4, #0]
 8002846:	1821      	adds	r1, r4, r0
 8002848:	428b      	cmp	r3, r1
 800284a:	bf01      	itttt	eq
 800284c:	6819      	ldreq	r1, [r3, #0]
 800284e:	685b      	ldreq	r3, [r3, #4]
 8002850:	1809      	addeq	r1, r1, r0
 8002852:	6021      	streq	r1, [r4, #0]
 8002854:	e7ed      	b.n	8002832 <_free_r+0x1e>
 8002856:	461a      	mov	r2, r3
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	b10b      	cbz	r3, 8002860 <_free_r+0x4c>
 800285c:	42a3      	cmp	r3, r4
 800285e:	d9fa      	bls.n	8002856 <_free_r+0x42>
 8002860:	6811      	ldr	r1, [r2, #0]
 8002862:	1850      	adds	r0, r2, r1
 8002864:	42a0      	cmp	r0, r4
 8002866:	d10b      	bne.n	8002880 <_free_r+0x6c>
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	4401      	add	r1, r0
 800286c:	1850      	adds	r0, r2, r1
 800286e:	4283      	cmp	r3, r0
 8002870:	6011      	str	r1, [r2, #0]
 8002872:	d1e0      	bne.n	8002836 <_free_r+0x22>
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4408      	add	r0, r1
 800287a:	6010      	str	r0, [r2, #0]
 800287c:	6053      	str	r3, [r2, #4]
 800287e:	e7da      	b.n	8002836 <_free_r+0x22>
 8002880:	d902      	bls.n	8002888 <_free_r+0x74>
 8002882:	230c      	movs	r3, #12
 8002884:	602b      	str	r3, [r5, #0]
 8002886:	e7d6      	b.n	8002836 <_free_r+0x22>
 8002888:	6820      	ldr	r0, [r4, #0]
 800288a:	1821      	adds	r1, r4, r0
 800288c:	428b      	cmp	r3, r1
 800288e:	bf01      	itttt	eq
 8002890:	6819      	ldreq	r1, [r3, #0]
 8002892:	685b      	ldreq	r3, [r3, #4]
 8002894:	1809      	addeq	r1, r1, r0
 8002896:	6021      	streq	r1, [r4, #0]
 8002898:	6063      	str	r3, [r4, #4]
 800289a:	6054      	str	r4, [r2, #4]
 800289c:	e7cb      	b.n	8002836 <_free_r+0x22>
 800289e:	bd38      	pop	{r3, r4, r5, pc}
 80028a0:	200003a0 	.word	0x200003a0

080028a4 <sbrk_aligned>:
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4e0e      	ldr	r6, [pc, #56]	; (80028e0 <sbrk_aligned+0x3c>)
 80028a8:	460c      	mov	r4, r1
 80028aa:	6831      	ldr	r1, [r6, #0]
 80028ac:	4605      	mov	r5, r0
 80028ae:	b911      	cbnz	r1, 80028b6 <sbrk_aligned+0x12>
 80028b0:	f000 fbaa 	bl	8003008 <_sbrk_r>
 80028b4:	6030      	str	r0, [r6, #0]
 80028b6:	4621      	mov	r1, r4
 80028b8:	4628      	mov	r0, r5
 80028ba:	f000 fba5 	bl	8003008 <_sbrk_r>
 80028be:	1c43      	adds	r3, r0, #1
 80028c0:	d00a      	beq.n	80028d8 <sbrk_aligned+0x34>
 80028c2:	1cc4      	adds	r4, r0, #3
 80028c4:	f024 0403 	bic.w	r4, r4, #3
 80028c8:	42a0      	cmp	r0, r4
 80028ca:	d007      	beq.n	80028dc <sbrk_aligned+0x38>
 80028cc:	1a21      	subs	r1, r4, r0
 80028ce:	4628      	mov	r0, r5
 80028d0:	f000 fb9a 	bl	8003008 <_sbrk_r>
 80028d4:	3001      	adds	r0, #1
 80028d6:	d101      	bne.n	80028dc <sbrk_aligned+0x38>
 80028d8:	f04f 34ff 	mov.w	r4, #4294967295
 80028dc:	4620      	mov	r0, r4
 80028de:	bd70      	pop	{r4, r5, r6, pc}
 80028e0:	200003a4 	.word	0x200003a4

080028e4 <_malloc_r>:
 80028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e8:	1ccd      	adds	r5, r1, #3
 80028ea:	f025 0503 	bic.w	r5, r5, #3
 80028ee:	3508      	adds	r5, #8
 80028f0:	2d0c      	cmp	r5, #12
 80028f2:	bf38      	it	cc
 80028f4:	250c      	movcc	r5, #12
 80028f6:	2d00      	cmp	r5, #0
 80028f8:	4607      	mov	r7, r0
 80028fa:	db01      	blt.n	8002900 <_malloc_r+0x1c>
 80028fc:	42a9      	cmp	r1, r5
 80028fe:	d905      	bls.n	800290c <_malloc_r+0x28>
 8002900:	230c      	movs	r3, #12
 8002902:	2600      	movs	r6, #0
 8002904:	603b      	str	r3, [r7, #0]
 8002906:	4630      	mov	r0, r6
 8002908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80029e0 <_malloc_r+0xfc>
 8002910:	f000 f868 	bl	80029e4 <__malloc_lock>
 8002914:	f8d8 3000 	ldr.w	r3, [r8]
 8002918:	461c      	mov	r4, r3
 800291a:	bb5c      	cbnz	r4, 8002974 <_malloc_r+0x90>
 800291c:	4629      	mov	r1, r5
 800291e:	4638      	mov	r0, r7
 8002920:	f7ff ffc0 	bl	80028a4 <sbrk_aligned>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	4604      	mov	r4, r0
 8002928:	d155      	bne.n	80029d6 <_malloc_r+0xf2>
 800292a:	f8d8 4000 	ldr.w	r4, [r8]
 800292e:	4626      	mov	r6, r4
 8002930:	2e00      	cmp	r6, #0
 8002932:	d145      	bne.n	80029c0 <_malloc_r+0xdc>
 8002934:	2c00      	cmp	r4, #0
 8002936:	d048      	beq.n	80029ca <_malloc_r+0xe6>
 8002938:	6823      	ldr	r3, [r4, #0]
 800293a:	4631      	mov	r1, r6
 800293c:	4638      	mov	r0, r7
 800293e:	eb04 0903 	add.w	r9, r4, r3
 8002942:	f000 fb61 	bl	8003008 <_sbrk_r>
 8002946:	4581      	cmp	r9, r0
 8002948:	d13f      	bne.n	80029ca <_malloc_r+0xe6>
 800294a:	6821      	ldr	r1, [r4, #0]
 800294c:	4638      	mov	r0, r7
 800294e:	1a6d      	subs	r5, r5, r1
 8002950:	4629      	mov	r1, r5
 8002952:	f7ff ffa7 	bl	80028a4 <sbrk_aligned>
 8002956:	3001      	adds	r0, #1
 8002958:	d037      	beq.n	80029ca <_malloc_r+0xe6>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	442b      	add	r3, r5
 800295e:	6023      	str	r3, [r4, #0]
 8002960:	f8d8 3000 	ldr.w	r3, [r8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d038      	beq.n	80029da <_malloc_r+0xf6>
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	42a2      	cmp	r2, r4
 800296c:	d12b      	bne.n	80029c6 <_malloc_r+0xe2>
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	e00f      	b.n	8002994 <_malloc_r+0xb0>
 8002974:	6822      	ldr	r2, [r4, #0]
 8002976:	1b52      	subs	r2, r2, r5
 8002978:	d41f      	bmi.n	80029ba <_malloc_r+0xd6>
 800297a:	2a0b      	cmp	r2, #11
 800297c:	d917      	bls.n	80029ae <_malloc_r+0xca>
 800297e:	1961      	adds	r1, r4, r5
 8002980:	42a3      	cmp	r3, r4
 8002982:	6025      	str	r5, [r4, #0]
 8002984:	bf18      	it	ne
 8002986:	6059      	strne	r1, [r3, #4]
 8002988:	6863      	ldr	r3, [r4, #4]
 800298a:	bf08      	it	eq
 800298c:	f8c8 1000 	streq.w	r1, [r8]
 8002990:	5162      	str	r2, [r4, r5]
 8002992:	604b      	str	r3, [r1, #4]
 8002994:	4638      	mov	r0, r7
 8002996:	f104 060b 	add.w	r6, r4, #11
 800299a:	f000 f829 	bl	80029f0 <__malloc_unlock>
 800299e:	f026 0607 	bic.w	r6, r6, #7
 80029a2:	1d23      	adds	r3, r4, #4
 80029a4:	1af2      	subs	r2, r6, r3
 80029a6:	d0ae      	beq.n	8002906 <_malloc_r+0x22>
 80029a8:	1b9b      	subs	r3, r3, r6
 80029aa:	50a3      	str	r3, [r4, r2]
 80029ac:	e7ab      	b.n	8002906 <_malloc_r+0x22>
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	6862      	ldr	r2, [r4, #4]
 80029b2:	d1dd      	bne.n	8002970 <_malloc_r+0x8c>
 80029b4:	f8c8 2000 	str.w	r2, [r8]
 80029b8:	e7ec      	b.n	8002994 <_malloc_r+0xb0>
 80029ba:	4623      	mov	r3, r4
 80029bc:	6864      	ldr	r4, [r4, #4]
 80029be:	e7ac      	b.n	800291a <_malloc_r+0x36>
 80029c0:	4634      	mov	r4, r6
 80029c2:	6876      	ldr	r6, [r6, #4]
 80029c4:	e7b4      	b.n	8002930 <_malloc_r+0x4c>
 80029c6:	4613      	mov	r3, r2
 80029c8:	e7cc      	b.n	8002964 <_malloc_r+0x80>
 80029ca:	230c      	movs	r3, #12
 80029cc:	4638      	mov	r0, r7
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	f000 f80e 	bl	80029f0 <__malloc_unlock>
 80029d4:	e797      	b.n	8002906 <_malloc_r+0x22>
 80029d6:	6025      	str	r5, [r4, #0]
 80029d8:	e7dc      	b.n	8002994 <_malloc_r+0xb0>
 80029da:	605b      	str	r3, [r3, #4]
 80029dc:	deff      	udf	#255	; 0xff
 80029de:	bf00      	nop
 80029e0:	200003a0 	.word	0x200003a0

080029e4 <__malloc_lock>:
 80029e4:	4801      	ldr	r0, [pc, #4]	; (80029ec <__malloc_lock+0x8>)
 80029e6:	f7ff bf05 	b.w	80027f4 <__retarget_lock_acquire_recursive>
 80029ea:	bf00      	nop
 80029ec:	2000039c 	.word	0x2000039c

080029f0 <__malloc_unlock>:
 80029f0:	4801      	ldr	r0, [pc, #4]	; (80029f8 <__malloc_unlock+0x8>)
 80029f2:	f7ff bf00 	b.w	80027f6 <__retarget_lock_release_recursive>
 80029f6:	bf00      	nop
 80029f8:	2000039c 	.word	0x2000039c

080029fc <__ssputs_r>:
 80029fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a00:	461f      	mov	r7, r3
 8002a02:	688e      	ldr	r6, [r1, #8]
 8002a04:	4682      	mov	sl, r0
 8002a06:	42be      	cmp	r6, r7
 8002a08:	460c      	mov	r4, r1
 8002a0a:	4690      	mov	r8, r2
 8002a0c:	680b      	ldr	r3, [r1, #0]
 8002a0e:	d82c      	bhi.n	8002a6a <__ssputs_r+0x6e>
 8002a10:	898a      	ldrh	r2, [r1, #12]
 8002a12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002a16:	d026      	beq.n	8002a66 <__ssputs_r+0x6a>
 8002a18:	6965      	ldr	r5, [r4, #20]
 8002a1a:	6909      	ldr	r1, [r1, #16]
 8002a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002a20:	eba3 0901 	sub.w	r9, r3, r1
 8002a24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002a28:	1c7b      	adds	r3, r7, #1
 8002a2a:	444b      	add	r3, r9
 8002a2c:	106d      	asrs	r5, r5, #1
 8002a2e:	429d      	cmp	r5, r3
 8002a30:	bf38      	it	cc
 8002a32:	461d      	movcc	r5, r3
 8002a34:	0553      	lsls	r3, r2, #21
 8002a36:	d527      	bpl.n	8002a88 <__ssputs_r+0x8c>
 8002a38:	4629      	mov	r1, r5
 8002a3a:	f7ff ff53 	bl	80028e4 <_malloc_r>
 8002a3e:	4606      	mov	r6, r0
 8002a40:	b360      	cbz	r0, 8002a9c <__ssputs_r+0xa0>
 8002a42:	464a      	mov	r2, r9
 8002a44:	6921      	ldr	r1, [r4, #16]
 8002a46:	f7ff fed7 	bl	80027f8 <memcpy>
 8002a4a:	89a3      	ldrh	r3, [r4, #12]
 8002a4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a54:	81a3      	strh	r3, [r4, #12]
 8002a56:	6126      	str	r6, [r4, #16]
 8002a58:	444e      	add	r6, r9
 8002a5a:	6026      	str	r6, [r4, #0]
 8002a5c:	463e      	mov	r6, r7
 8002a5e:	6165      	str	r5, [r4, #20]
 8002a60:	eba5 0509 	sub.w	r5, r5, r9
 8002a64:	60a5      	str	r5, [r4, #8]
 8002a66:	42be      	cmp	r6, r7
 8002a68:	d900      	bls.n	8002a6c <__ssputs_r+0x70>
 8002a6a:	463e      	mov	r6, r7
 8002a6c:	4632      	mov	r2, r6
 8002a6e:	4641      	mov	r1, r8
 8002a70:	6820      	ldr	r0, [r4, #0]
 8002a72:	f000 faaf 	bl	8002fd4 <memmove>
 8002a76:	2000      	movs	r0, #0
 8002a78:	68a3      	ldr	r3, [r4, #8]
 8002a7a:	1b9b      	subs	r3, r3, r6
 8002a7c:	60a3      	str	r3, [r4, #8]
 8002a7e:	6823      	ldr	r3, [r4, #0]
 8002a80:	4433      	add	r3, r6
 8002a82:	6023      	str	r3, [r4, #0]
 8002a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a88:	462a      	mov	r2, r5
 8002a8a:	f000 fadb 	bl	8003044 <_realloc_r>
 8002a8e:	4606      	mov	r6, r0
 8002a90:	2800      	cmp	r0, #0
 8002a92:	d1e0      	bne.n	8002a56 <__ssputs_r+0x5a>
 8002a94:	4650      	mov	r0, sl
 8002a96:	6921      	ldr	r1, [r4, #16]
 8002a98:	f7ff febc 	bl	8002814 <_free_r>
 8002a9c:	230c      	movs	r3, #12
 8002a9e:	f8ca 3000 	str.w	r3, [sl]
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aac:	81a3      	strh	r3, [r4, #12]
 8002aae:	e7e9      	b.n	8002a84 <__ssputs_r+0x88>

08002ab0 <_svfiprintf_r>:
 8002ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab4:	4698      	mov	r8, r3
 8002ab6:	898b      	ldrh	r3, [r1, #12]
 8002ab8:	4607      	mov	r7, r0
 8002aba:	061b      	lsls	r3, r3, #24
 8002abc:	460d      	mov	r5, r1
 8002abe:	4614      	mov	r4, r2
 8002ac0:	b09d      	sub	sp, #116	; 0x74
 8002ac2:	d50e      	bpl.n	8002ae2 <_svfiprintf_r+0x32>
 8002ac4:	690b      	ldr	r3, [r1, #16]
 8002ac6:	b963      	cbnz	r3, 8002ae2 <_svfiprintf_r+0x32>
 8002ac8:	2140      	movs	r1, #64	; 0x40
 8002aca:	f7ff ff0b 	bl	80028e4 <_malloc_r>
 8002ace:	6028      	str	r0, [r5, #0]
 8002ad0:	6128      	str	r0, [r5, #16]
 8002ad2:	b920      	cbnz	r0, 8002ade <_svfiprintf_r+0x2e>
 8002ad4:	230c      	movs	r3, #12
 8002ad6:	603b      	str	r3, [r7, #0]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	e0d0      	b.n	8002c80 <_svfiprintf_r+0x1d0>
 8002ade:	2340      	movs	r3, #64	; 0x40
 8002ae0:	616b      	str	r3, [r5, #20]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002aec:	2330      	movs	r3, #48	; 0x30
 8002aee:	f04f 0901 	mov.w	r9, #1
 8002af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8002af6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002c98 <_svfiprintf_r+0x1e8>
 8002afa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002afe:	4623      	mov	r3, r4
 8002b00:	469a      	mov	sl, r3
 8002b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b06:	b10a      	cbz	r2, 8002b0c <_svfiprintf_r+0x5c>
 8002b08:	2a25      	cmp	r2, #37	; 0x25
 8002b0a:	d1f9      	bne.n	8002b00 <_svfiprintf_r+0x50>
 8002b0c:	ebba 0b04 	subs.w	fp, sl, r4
 8002b10:	d00b      	beq.n	8002b2a <_svfiprintf_r+0x7a>
 8002b12:	465b      	mov	r3, fp
 8002b14:	4622      	mov	r2, r4
 8002b16:	4629      	mov	r1, r5
 8002b18:	4638      	mov	r0, r7
 8002b1a:	f7ff ff6f 	bl	80029fc <__ssputs_r>
 8002b1e:	3001      	adds	r0, #1
 8002b20:	f000 80a9 	beq.w	8002c76 <_svfiprintf_r+0x1c6>
 8002b24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b26:	445a      	add	r2, fp
 8002b28:	9209      	str	r2, [sp, #36]	; 0x24
 8002b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a1 	beq.w	8002c76 <_svfiprintf_r+0x1c6>
 8002b34:	2300      	movs	r3, #0
 8002b36:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b3e:	f10a 0a01 	add.w	sl, sl, #1
 8002b42:	9304      	str	r3, [sp, #16]
 8002b44:	9307      	str	r3, [sp, #28]
 8002b46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b4a:	931a      	str	r3, [sp, #104]	; 0x68
 8002b4c:	4654      	mov	r4, sl
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b54:	4850      	ldr	r0, [pc, #320]	; (8002c98 <_svfiprintf_r+0x1e8>)
 8002b56:	f000 fa67 	bl	8003028 <memchr>
 8002b5a:	9a04      	ldr	r2, [sp, #16]
 8002b5c:	b9d8      	cbnz	r0, 8002b96 <_svfiprintf_r+0xe6>
 8002b5e:	06d0      	lsls	r0, r2, #27
 8002b60:	bf44      	itt	mi
 8002b62:	2320      	movmi	r3, #32
 8002b64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b68:	0711      	lsls	r1, r2, #28
 8002b6a:	bf44      	itt	mi
 8002b6c:	232b      	movmi	r3, #43	; 0x2b
 8002b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b72:	f89a 3000 	ldrb.w	r3, [sl]
 8002b76:	2b2a      	cmp	r3, #42	; 0x2a
 8002b78:	d015      	beq.n	8002ba6 <_svfiprintf_r+0xf6>
 8002b7a:	4654      	mov	r4, sl
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f04f 0c0a 	mov.w	ip, #10
 8002b82:	9a07      	ldr	r2, [sp, #28]
 8002b84:	4621      	mov	r1, r4
 8002b86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b8a:	3b30      	subs	r3, #48	; 0x30
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d94d      	bls.n	8002c2c <_svfiprintf_r+0x17c>
 8002b90:	b1b0      	cbz	r0, 8002bc0 <_svfiprintf_r+0x110>
 8002b92:	9207      	str	r2, [sp, #28]
 8002b94:	e014      	b.n	8002bc0 <_svfiprintf_r+0x110>
 8002b96:	eba0 0308 	sub.w	r3, r0, r8
 8002b9a:	fa09 f303 	lsl.w	r3, r9, r3
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	46a2      	mov	sl, r4
 8002ba2:	9304      	str	r3, [sp, #16]
 8002ba4:	e7d2      	b.n	8002b4c <_svfiprintf_r+0x9c>
 8002ba6:	9b03      	ldr	r3, [sp, #12]
 8002ba8:	1d19      	adds	r1, r3, #4
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	9103      	str	r1, [sp, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfbb      	ittet	lt
 8002bb2:	425b      	neglt	r3, r3
 8002bb4:	f042 0202 	orrlt.w	r2, r2, #2
 8002bb8:	9307      	strge	r3, [sp, #28]
 8002bba:	9307      	strlt	r3, [sp, #28]
 8002bbc:	bfb8      	it	lt
 8002bbe:	9204      	strlt	r2, [sp, #16]
 8002bc0:	7823      	ldrb	r3, [r4, #0]
 8002bc2:	2b2e      	cmp	r3, #46	; 0x2e
 8002bc4:	d10c      	bne.n	8002be0 <_svfiprintf_r+0x130>
 8002bc6:	7863      	ldrb	r3, [r4, #1]
 8002bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8002bca:	d134      	bne.n	8002c36 <_svfiprintf_r+0x186>
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	3402      	adds	r4, #2
 8002bd0:	1d1a      	adds	r2, r3, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	9203      	str	r2, [sp, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	bfb8      	it	lt
 8002bda:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bde:	9305      	str	r3, [sp, #20]
 8002be0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8002c9c <_svfiprintf_r+0x1ec>
 8002be4:	2203      	movs	r2, #3
 8002be6:	4650      	mov	r0, sl
 8002be8:	7821      	ldrb	r1, [r4, #0]
 8002bea:	f000 fa1d 	bl	8003028 <memchr>
 8002bee:	b138      	cbz	r0, 8002c00 <_svfiprintf_r+0x150>
 8002bf0:	2240      	movs	r2, #64	; 0x40
 8002bf2:	9b04      	ldr	r3, [sp, #16]
 8002bf4:	eba0 000a 	sub.w	r0, r0, sl
 8002bf8:	4082      	lsls	r2, r0
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	3401      	adds	r4, #1
 8002bfe:	9304      	str	r3, [sp, #16]
 8002c00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c04:	2206      	movs	r2, #6
 8002c06:	4826      	ldr	r0, [pc, #152]	; (8002ca0 <_svfiprintf_r+0x1f0>)
 8002c08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c0c:	f000 fa0c 	bl	8003028 <memchr>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	d038      	beq.n	8002c86 <_svfiprintf_r+0x1d6>
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <_svfiprintf_r+0x1f4>)
 8002c16:	bb1b      	cbnz	r3, 8002c60 <_svfiprintf_r+0x1b0>
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	3307      	adds	r3, #7
 8002c1c:	f023 0307 	bic.w	r3, r3, #7
 8002c20:	3308      	adds	r3, #8
 8002c22:	9303      	str	r3, [sp, #12]
 8002c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c26:	4433      	add	r3, r6
 8002c28:	9309      	str	r3, [sp, #36]	; 0x24
 8002c2a:	e768      	b.n	8002afe <_svfiprintf_r+0x4e>
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	2001      	movs	r0, #1
 8002c30:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c34:	e7a6      	b.n	8002b84 <_svfiprintf_r+0xd4>
 8002c36:	2300      	movs	r3, #0
 8002c38:	f04f 0c0a 	mov.w	ip, #10
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	3401      	adds	r4, #1
 8002c40:	9305      	str	r3, [sp, #20]
 8002c42:	4620      	mov	r0, r4
 8002c44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c48:	3a30      	subs	r2, #48	; 0x30
 8002c4a:	2a09      	cmp	r2, #9
 8002c4c:	d903      	bls.n	8002c56 <_svfiprintf_r+0x1a6>
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0c6      	beq.n	8002be0 <_svfiprintf_r+0x130>
 8002c52:	9105      	str	r1, [sp, #20]
 8002c54:	e7c4      	b.n	8002be0 <_svfiprintf_r+0x130>
 8002c56:	4604      	mov	r4, r0
 8002c58:	2301      	movs	r3, #1
 8002c5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c5e:	e7f0      	b.n	8002c42 <_svfiprintf_r+0x192>
 8002c60:	ab03      	add	r3, sp, #12
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	462a      	mov	r2, r5
 8002c66:	4638      	mov	r0, r7
 8002c68:	4b0f      	ldr	r3, [pc, #60]	; (8002ca8 <_svfiprintf_r+0x1f8>)
 8002c6a:	a904      	add	r1, sp, #16
 8002c6c:	f3af 8000 	nop.w
 8002c70:	1c42      	adds	r2, r0, #1
 8002c72:	4606      	mov	r6, r0
 8002c74:	d1d6      	bne.n	8002c24 <_svfiprintf_r+0x174>
 8002c76:	89ab      	ldrh	r3, [r5, #12]
 8002c78:	065b      	lsls	r3, r3, #25
 8002c7a:	f53f af2d 	bmi.w	8002ad8 <_svfiprintf_r+0x28>
 8002c7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c80:	b01d      	add	sp, #116	; 0x74
 8002c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c86:	ab03      	add	r3, sp, #12
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	462a      	mov	r2, r5
 8002c8c:	4638      	mov	r0, r7
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <_svfiprintf_r+0x1f8>)
 8002c90:	a904      	add	r1, sp, #16
 8002c92:	f000 f87d 	bl	8002d90 <_printf_i>
 8002c96:	e7eb      	b.n	8002c70 <_svfiprintf_r+0x1c0>
 8002c98:	08003262 	.word	0x08003262
 8002c9c:	08003268 	.word	0x08003268
 8002ca0:	0800326c 	.word	0x0800326c
 8002ca4:	00000000 	.word	0x00000000
 8002ca8:	080029fd 	.word	0x080029fd

08002cac <_printf_common>:
 8002cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cb0:	4616      	mov	r6, r2
 8002cb2:	4699      	mov	r9, r3
 8002cb4:	688a      	ldr	r2, [r1, #8]
 8002cb6:	690b      	ldr	r3, [r1, #16]
 8002cb8:	4607      	mov	r7, r0
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	bfb8      	it	lt
 8002cbe:	4613      	movlt	r3, r2
 8002cc0:	6033      	str	r3, [r6, #0]
 8002cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cc6:	460c      	mov	r4, r1
 8002cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002ccc:	b10a      	cbz	r2, 8002cd2 <_printf_common+0x26>
 8002cce:	3301      	adds	r3, #1
 8002cd0:	6033      	str	r3, [r6, #0]
 8002cd2:	6823      	ldr	r3, [r4, #0]
 8002cd4:	0699      	lsls	r1, r3, #26
 8002cd6:	bf42      	ittt	mi
 8002cd8:	6833      	ldrmi	r3, [r6, #0]
 8002cda:	3302      	addmi	r3, #2
 8002cdc:	6033      	strmi	r3, [r6, #0]
 8002cde:	6825      	ldr	r5, [r4, #0]
 8002ce0:	f015 0506 	ands.w	r5, r5, #6
 8002ce4:	d106      	bne.n	8002cf4 <_printf_common+0x48>
 8002ce6:	f104 0a19 	add.w	sl, r4, #25
 8002cea:	68e3      	ldr	r3, [r4, #12]
 8002cec:	6832      	ldr	r2, [r6, #0]
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	42ab      	cmp	r3, r5
 8002cf2:	dc2b      	bgt.n	8002d4c <_printf_common+0xa0>
 8002cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002cf8:	1e13      	subs	r3, r2, #0
 8002cfa:	6822      	ldr	r2, [r4, #0]
 8002cfc:	bf18      	it	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	0692      	lsls	r2, r2, #26
 8002d02:	d430      	bmi.n	8002d66 <_printf_common+0xba>
 8002d04:	4649      	mov	r1, r9
 8002d06:	4638      	mov	r0, r7
 8002d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d0c:	47c0      	blx	r8
 8002d0e:	3001      	adds	r0, #1
 8002d10:	d023      	beq.n	8002d5a <_printf_common+0xae>
 8002d12:	6823      	ldr	r3, [r4, #0]
 8002d14:	6922      	ldr	r2, [r4, #16]
 8002d16:	f003 0306 	and.w	r3, r3, #6
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	bf14      	ite	ne
 8002d1e:	2500      	movne	r5, #0
 8002d20:	6833      	ldreq	r3, [r6, #0]
 8002d22:	f04f 0600 	mov.w	r6, #0
 8002d26:	bf08      	it	eq
 8002d28:	68e5      	ldreq	r5, [r4, #12]
 8002d2a:	f104 041a 	add.w	r4, r4, #26
 8002d2e:	bf08      	it	eq
 8002d30:	1aed      	subeq	r5, r5, r3
 8002d32:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002d36:	bf08      	it	eq
 8002d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	bfc4      	itt	gt
 8002d40:	1a9b      	subgt	r3, r3, r2
 8002d42:	18ed      	addgt	r5, r5, r3
 8002d44:	42b5      	cmp	r5, r6
 8002d46:	d11a      	bne.n	8002d7e <_printf_common+0xd2>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e008      	b.n	8002d5e <_printf_common+0xb2>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	4652      	mov	r2, sl
 8002d50:	4649      	mov	r1, r9
 8002d52:	4638      	mov	r0, r7
 8002d54:	47c0      	blx	r8
 8002d56:	3001      	adds	r0, #1
 8002d58:	d103      	bne.n	8002d62 <_printf_common+0xb6>
 8002d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d62:	3501      	adds	r5, #1
 8002d64:	e7c1      	b.n	8002cea <_printf_common+0x3e>
 8002d66:	2030      	movs	r0, #48	; 0x30
 8002d68:	18e1      	adds	r1, r4, r3
 8002d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d74:	4422      	add	r2, r4
 8002d76:	3302      	adds	r3, #2
 8002d78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d7c:	e7c2      	b.n	8002d04 <_printf_common+0x58>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4622      	mov	r2, r4
 8002d82:	4649      	mov	r1, r9
 8002d84:	4638      	mov	r0, r7
 8002d86:	47c0      	blx	r8
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d0e6      	beq.n	8002d5a <_printf_common+0xae>
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	e7d9      	b.n	8002d44 <_printf_common+0x98>

08002d90 <_printf_i>:
 8002d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002d94:	7e0f      	ldrb	r7, [r1, #24]
 8002d96:	4691      	mov	r9, r2
 8002d98:	2f78      	cmp	r7, #120	; 0x78
 8002d9a:	4680      	mov	r8, r0
 8002d9c:	460c      	mov	r4, r1
 8002d9e:	469a      	mov	sl, r3
 8002da0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002da6:	d807      	bhi.n	8002db8 <_printf_i+0x28>
 8002da8:	2f62      	cmp	r7, #98	; 0x62
 8002daa:	d80a      	bhi.n	8002dc2 <_printf_i+0x32>
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	f000 80d5 	beq.w	8002f5c <_printf_i+0x1cc>
 8002db2:	2f58      	cmp	r7, #88	; 0x58
 8002db4:	f000 80c1 	beq.w	8002f3a <_printf_i+0x1aa>
 8002db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002dc0:	e03a      	b.n	8002e38 <_printf_i+0xa8>
 8002dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002dc6:	2b15      	cmp	r3, #21
 8002dc8:	d8f6      	bhi.n	8002db8 <_printf_i+0x28>
 8002dca:	a101      	add	r1, pc, #4	; (adr r1, 8002dd0 <_printf_i+0x40>)
 8002dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002dd0:	08002e29 	.word	0x08002e29
 8002dd4:	08002e3d 	.word	0x08002e3d
 8002dd8:	08002db9 	.word	0x08002db9
 8002ddc:	08002db9 	.word	0x08002db9
 8002de0:	08002db9 	.word	0x08002db9
 8002de4:	08002db9 	.word	0x08002db9
 8002de8:	08002e3d 	.word	0x08002e3d
 8002dec:	08002db9 	.word	0x08002db9
 8002df0:	08002db9 	.word	0x08002db9
 8002df4:	08002db9 	.word	0x08002db9
 8002df8:	08002db9 	.word	0x08002db9
 8002dfc:	08002f43 	.word	0x08002f43
 8002e00:	08002e69 	.word	0x08002e69
 8002e04:	08002efd 	.word	0x08002efd
 8002e08:	08002db9 	.word	0x08002db9
 8002e0c:	08002db9 	.word	0x08002db9
 8002e10:	08002f65 	.word	0x08002f65
 8002e14:	08002db9 	.word	0x08002db9
 8002e18:	08002e69 	.word	0x08002e69
 8002e1c:	08002db9 	.word	0x08002db9
 8002e20:	08002db9 	.word	0x08002db9
 8002e24:	08002f05 	.word	0x08002f05
 8002e28:	682b      	ldr	r3, [r5, #0]
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	602a      	str	r2, [r5, #0]
 8002e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0a0      	b.n	8002f7e <_printf_i+0x1ee>
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	682b      	ldr	r3, [r5, #0]
 8002e40:	0607      	lsls	r7, r0, #24
 8002e42:	f103 0104 	add.w	r1, r3, #4
 8002e46:	6029      	str	r1, [r5, #0]
 8002e48:	d501      	bpl.n	8002e4e <_printf_i+0xbe>
 8002e4a:	681e      	ldr	r6, [r3, #0]
 8002e4c:	e003      	b.n	8002e56 <_printf_i+0xc6>
 8002e4e:	0646      	lsls	r6, r0, #25
 8002e50:	d5fb      	bpl.n	8002e4a <_printf_i+0xba>
 8002e52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e56:	2e00      	cmp	r6, #0
 8002e58:	da03      	bge.n	8002e62 <_printf_i+0xd2>
 8002e5a:	232d      	movs	r3, #45	; 0x2d
 8002e5c:	4276      	negs	r6, r6
 8002e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e62:	230a      	movs	r3, #10
 8002e64:	4859      	ldr	r0, [pc, #356]	; (8002fcc <_printf_i+0x23c>)
 8002e66:	e012      	b.n	8002e8e <_printf_i+0xfe>
 8002e68:	682b      	ldr	r3, [r5, #0]
 8002e6a:	6820      	ldr	r0, [r4, #0]
 8002e6c:	1d19      	adds	r1, r3, #4
 8002e6e:	6029      	str	r1, [r5, #0]
 8002e70:	0605      	lsls	r5, r0, #24
 8002e72:	d501      	bpl.n	8002e78 <_printf_i+0xe8>
 8002e74:	681e      	ldr	r6, [r3, #0]
 8002e76:	e002      	b.n	8002e7e <_printf_i+0xee>
 8002e78:	0641      	lsls	r1, r0, #25
 8002e7a:	d5fb      	bpl.n	8002e74 <_printf_i+0xe4>
 8002e7c:	881e      	ldrh	r6, [r3, #0]
 8002e7e:	2f6f      	cmp	r7, #111	; 0x6f
 8002e80:	bf0c      	ite	eq
 8002e82:	2308      	moveq	r3, #8
 8002e84:	230a      	movne	r3, #10
 8002e86:	4851      	ldr	r0, [pc, #324]	; (8002fcc <_printf_i+0x23c>)
 8002e88:	2100      	movs	r1, #0
 8002e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e8e:	6865      	ldr	r5, [r4, #4]
 8002e90:	2d00      	cmp	r5, #0
 8002e92:	bfa8      	it	ge
 8002e94:	6821      	ldrge	r1, [r4, #0]
 8002e96:	60a5      	str	r5, [r4, #8]
 8002e98:	bfa4      	itt	ge
 8002e9a:	f021 0104 	bicge.w	r1, r1, #4
 8002e9e:	6021      	strge	r1, [r4, #0]
 8002ea0:	b90e      	cbnz	r6, 8002ea6 <_printf_i+0x116>
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	d04b      	beq.n	8002f3e <_printf_i+0x1ae>
 8002ea6:	4615      	mov	r5, r2
 8002ea8:	fbb6 f1f3 	udiv	r1, r6, r3
 8002eac:	fb03 6711 	mls	r7, r3, r1, r6
 8002eb0:	5dc7      	ldrb	r7, [r0, r7]
 8002eb2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002eb6:	4637      	mov	r7, r6
 8002eb8:	42bb      	cmp	r3, r7
 8002eba:	460e      	mov	r6, r1
 8002ebc:	d9f4      	bls.n	8002ea8 <_printf_i+0x118>
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d10b      	bne.n	8002eda <_printf_i+0x14a>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	07de      	lsls	r6, r3, #31
 8002ec6:	d508      	bpl.n	8002eda <_printf_i+0x14a>
 8002ec8:	6923      	ldr	r3, [r4, #16]
 8002eca:	6861      	ldr	r1, [r4, #4]
 8002ecc:	4299      	cmp	r1, r3
 8002ece:	bfde      	ittt	le
 8002ed0:	2330      	movle	r3, #48	; 0x30
 8002ed2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ed6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002eda:	1b52      	subs	r2, r2, r5
 8002edc:	6122      	str	r2, [r4, #16]
 8002ede:	464b      	mov	r3, r9
 8002ee0:	4621      	mov	r1, r4
 8002ee2:	4640      	mov	r0, r8
 8002ee4:	f8cd a000 	str.w	sl, [sp]
 8002ee8:	aa03      	add	r2, sp, #12
 8002eea:	f7ff fedf 	bl	8002cac <_printf_common>
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d14a      	bne.n	8002f88 <_printf_i+0x1f8>
 8002ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef6:	b004      	add	sp, #16
 8002ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	f043 0320 	orr.w	r3, r3, #32
 8002f02:	6023      	str	r3, [r4, #0]
 8002f04:	2778      	movs	r7, #120	; 0x78
 8002f06:	4832      	ldr	r0, [pc, #200]	; (8002fd0 <_printf_i+0x240>)
 8002f08:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002f0c:	6823      	ldr	r3, [r4, #0]
 8002f0e:	6829      	ldr	r1, [r5, #0]
 8002f10:	061f      	lsls	r7, r3, #24
 8002f12:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f16:	d402      	bmi.n	8002f1e <_printf_i+0x18e>
 8002f18:	065f      	lsls	r7, r3, #25
 8002f1a:	bf48      	it	mi
 8002f1c:	b2b6      	uxthmi	r6, r6
 8002f1e:	07df      	lsls	r7, r3, #31
 8002f20:	bf48      	it	mi
 8002f22:	f043 0320 	orrmi.w	r3, r3, #32
 8002f26:	6029      	str	r1, [r5, #0]
 8002f28:	bf48      	it	mi
 8002f2a:	6023      	strmi	r3, [r4, #0]
 8002f2c:	b91e      	cbnz	r6, 8002f36 <_printf_i+0x1a6>
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	f023 0320 	bic.w	r3, r3, #32
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	2310      	movs	r3, #16
 8002f38:	e7a6      	b.n	8002e88 <_printf_i+0xf8>
 8002f3a:	4824      	ldr	r0, [pc, #144]	; (8002fcc <_printf_i+0x23c>)
 8002f3c:	e7e4      	b.n	8002f08 <_printf_i+0x178>
 8002f3e:	4615      	mov	r5, r2
 8002f40:	e7bd      	b.n	8002ebe <_printf_i+0x12e>
 8002f42:	682b      	ldr	r3, [r5, #0]
 8002f44:	6826      	ldr	r6, [r4, #0]
 8002f46:	1d18      	adds	r0, r3, #4
 8002f48:	6961      	ldr	r1, [r4, #20]
 8002f4a:	6028      	str	r0, [r5, #0]
 8002f4c:	0635      	lsls	r5, r6, #24
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	d501      	bpl.n	8002f56 <_printf_i+0x1c6>
 8002f52:	6019      	str	r1, [r3, #0]
 8002f54:	e002      	b.n	8002f5c <_printf_i+0x1cc>
 8002f56:	0670      	lsls	r0, r6, #25
 8002f58:	d5fb      	bpl.n	8002f52 <_printf_i+0x1c2>
 8002f5a:	8019      	strh	r1, [r3, #0]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	4615      	mov	r5, r2
 8002f60:	6123      	str	r3, [r4, #16]
 8002f62:	e7bc      	b.n	8002ede <_printf_i+0x14e>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	2100      	movs	r1, #0
 8002f68:	1d1a      	adds	r2, r3, #4
 8002f6a:	602a      	str	r2, [r5, #0]
 8002f6c:	681d      	ldr	r5, [r3, #0]
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	4628      	mov	r0, r5
 8002f72:	f000 f859 	bl	8003028 <memchr>
 8002f76:	b108      	cbz	r0, 8002f7c <_printf_i+0x1ec>
 8002f78:	1b40      	subs	r0, r0, r5
 8002f7a:	6060      	str	r0, [r4, #4]
 8002f7c:	6863      	ldr	r3, [r4, #4]
 8002f7e:	6123      	str	r3, [r4, #16]
 8002f80:	2300      	movs	r3, #0
 8002f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f86:	e7aa      	b.n	8002ede <_printf_i+0x14e>
 8002f88:	462a      	mov	r2, r5
 8002f8a:	4649      	mov	r1, r9
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	6923      	ldr	r3, [r4, #16]
 8002f90:	47d0      	blx	sl
 8002f92:	3001      	adds	r0, #1
 8002f94:	d0ad      	beq.n	8002ef2 <_printf_i+0x162>
 8002f96:	6823      	ldr	r3, [r4, #0]
 8002f98:	079b      	lsls	r3, r3, #30
 8002f9a:	d413      	bmi.n	8002fc4 <_printf_i+0x234>
 8002f9c:	68e0      	ldr	r0, [r4, #12]
 8002f9e:	9b03      	ldr	r3, [sp, #12]
 8002fa0:	4298      	cmp	r0, r3
 8002fa2:	bfb8      	it	lt
 8002fa4:	4618      	movlt	r0, r3
 8002fa6:	e7a6      	b.n	8002ef6 <_printf_i+0x166>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	4632      	mov	r2, r6
 8002fac:	4649      	mov	r1, r9
 8002fae:	4640      	mov	r0, r8
 8002fb0:	47d0      	blx	sl
 8002fb2:	3001      	adds	r0, #1
 8002fb4:	d09d      	beq.n	8002ef2 <_printf_i+0x162>
 8002fb6:	3501      	adds	r5, #1
 8002fb8:	68e3      	ldr	r3, [r4, #12]
 8002fba:	9903      	ldr	r1, [sp, #12]
 8002fbc:	1a5b      	subs	r3, r3, r1
 8002fbe:	42ab      	cmp	r3, r5
 8002fc0:	dcf2      	bgt.n	8002fa8 <_printf_i+0x218>
 8002fc2:	e7eb      	b.n	8002f9c <_printf_i+0x20c>
 8002fc4:	2500      	movs	r5, #0
 8002fc6:	f104 0619 	add.w	r6, r4, #25
 8002fca:	e7f5      	b.n	8002fb8 <_printf_i+0x228>
 8002fcc:	08003273 	.word	0x08003273
 8002fd0:	08003284 	.word	0x08003284

08002fd4 <memmove>:
 8002fd4:	4288      	cmp	r0, r1
 8002fd6:	b510      	push	{r4, lr}
 8002fd8:	eb01 0402 	add.w	r4, r1, r2
 8002fdc:	d902      	bls.n	8002fe4 <memmove+0x10>
 8002fde:	4284      	cmp	r4, r0
 8002fe0:	4623      	mov	r3, r4
 8002fe2:	d807      	bhi.n	8002ff4 <memmove+0x20>
 8002fe4:	1e43      	subs	r3, r0, #1
 8002fe6:	42a1      	cmp	r1, r4
 8002fe8:	d008      	beq.n	8002ffc <memmove+0x28>
 8002fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ff2:	e7f8      	b.n	8002fe6 <memmove+0x12>
 8002ff4:	4601      	mov	r1, r0
 8002ff6:	4402      	add	r2, r0
 8002ff8:	428a      	cmp	r2, r1
 8002ffa:	d100      	bne.n	8002ffe <memmove+0x2a>
 8002ffc:	bd10      	pop	{r4, pc}
 8002ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003006:	e7f7      	b.n	8002ff8 <memmove+0x24>

08003008 <_sbrk_r>:
 8003008:	b538      	push	{r3, r4, r5, lr}
 800300a:	2300      	movs	r3, #0
 800300c:	4d05      	ldr	r5, [pc, #20]	; (8003024 <_sbrk_r+0x1c>)
 800300e:	4604      	mov	r4, r0
 8003010:	4608      	mov	r0, r1
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	f7fd fc96 	bl	8000944 <_sbrk>
 8003018:	1c43      	adds	r3, r0, #1
 800301a:	d102      	bne.n	8003022 <_sbrk_r+0x1a>
 800301c:	682b      	ldr	r3, [r5, #0]
 800301e:	b103      	cbz	r3, 8003022 <_sbrk_r+0x1a>
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	bd38      	pop	{r3, r4, r5, pc}
 8003024:	20000398 	.word	0x20000398

08003028 <memchr>:
 8003028:	4603      	mov	r3, r0
 800302a:	b510      	push	{r4, lr}
 800302c:	b2c9      	uxtb	r1, r1
 800302e:	4402      	add	r2, r0
 8003030:	4293      	cmp	r3, r2
 8003032:	4618      	mov	r0, r3
 8003034:	d101      	bne.n	800303a <memchr+0x12>
 8003036:	2000      	movs	r0, #0
 8003038:	e003      	b.n	8003042 <memchr+0x1a>
 800303a:	7804      	ldrb	r4, [r0, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	428c      	cmp	r4, r1
 8003040:	d1f6      	bne.n	8003030 <memchr+0x8>
 8003042:	bd10      	pop	{r4, pc}

08003044 <_realloc_r>:
 8003044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003048:	4680      	mov	r8, r0
 800304a:	4614      	mov	r4, r2
 800304c:	460e      	mov	r6, r1
 800304e:	b921      	cbnz	r1, 800305a <_realloc_r+0x16>
 8003050:	4611      	mov	r1, r2
 8003052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003056:	f7ff bc45 	b.w	80028e4 <_malloc_r>
 800305a:	b92a      	cbnz	r2, 8003068 <_realloc_r+0x24>
 800305c:	f7ff fbda 	bl	8002814 <_free_r>
 8003060:	4625      	mov	r5, r4
 8003062:	4628      	mov	r0, r5
 8003064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003068:	f000 f81b 	bl	80030a2 <_malloc_usable_size_r>
 800306c:	4284      	cmp	r4, r0
 800306e:	4607      	mov	r7, r0
 8003070:	d802      	bhi.n	8003078 <_realloc_r+0x34>
 8003072:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003076:	d812      	bhi.n	800309e <_realloc_r+0x5a>
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f7ff fc32 	bl	80028e4 <_malloc_r>
 8003080:	4605      	mov	r5, r0
 8003082:	2800      	cmp	r0, #0
 8003084:	d0ed      	beq.n	8003062 <_realloc_r+0x1e>
 8003086:	42bc      	cmp	r4, r7
 8003088:	4622      	mov	r2, r4
 800308a:	4631      	mov	r1, r6
 800308c:	bf28      	it	cs
 800308e:	463a      	movcs	r2, r7
 8003090:	f7ff fbb2 	bl	80027f8 <memcpy>
 8003094:	4631      	mov	r1, r6
 8003096:	4640      	mov	r0, r8
 8003098:	f7ff fbbc 	bl	8002814 <_free_r>
 800309c:	e7e1      	b.n	8003062 <_realloc_r+0x1e>
 800309e:	4635      	mov	r5, r6
 80030a0:	e7df      	b.n	8003062 <_realloc_r+0x1e>

080030a2 <_malloc_usable_size_r>:
 80030a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030a6:	1f18      	subs	r0, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfbc      	itt	lt
 80030ac:	580b      	ldrlt	r3, [r1, r0]
 80030ae:	18c0      	addlt	r0, r0, r3
 80030b0:	4770      	bx	lr
	...

080030b4 <_init>:
 80030b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b6:	bf00      	nop
 80030b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ba:	bc08      	pop	{r3}
 80030bc:	469e      	mov	lr, r3
 80030be:	4770      	bx	lr

080030c0 <_fini>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr
